setwd("../data")
ls()
dir()
setwd("../data/salmon_counts")
quant_files <- file.path("quants", list.files("quants"), "quant.sf")
quant_files
library(DESeq2)
samples <- c("ORE_sdE3_rep1", "ORE_sdE3_rep2", "ORE_wt_rep1","ORE_wt_rep2", "HYB_sdE3_rep1", "HYB_wt_rep1", "SAM_sdE3_rep1","SAM_sdE3_rep2", "SAM_wt_rep1","SAM_wt_rep2", "HYB_sdE3_rep2", "HYB_wt_rep2")
names(quant_files) <- samples
tx2gene <- read.table("txp_to_gene.tsv", col.names=c("TXNAME", "GENEID"))
head(tx2gene)
length(table(TXNAME))
length(table(tx2gene$TXNAME))
length(table(tx2gene$GENEID))
txi <- tximport(quant_files,
type = "salmon",
tx2gene = tx2gene,
reader = read_tsv)
library(tximport)
library(readr)
library(DESeq2)
library(tximport)
library(readr)
library("RColorBrewer")
library("gplots")
txi <- tximport(quant_files,
type = "salmon",
tx2gene = tx2gene,
reader = read_tsv)
summary(txi) # why 166884
str(txi)
head(txi$counts) # note these are not integers!
cor(txi$counts)
background <- c(rep("ORE", 4), rep("HYB", 2), rep("SAM", 4), rep("HYB", 2))
genotype <- c("sdE3", "sdE3", "wt", "wt", "sdE3", "wt", "sdE3", "sdE3", "wt", "wt", "sdE3", "wt")
lane <- c(4,5,1,2,2,6,6,7,3,4,1,5)
lane <- factor(lane) # we will want to treat this as a factor
rna.design <- data.frame(sample=samples,
file=quant_files,
background=background,
genotype=genotype,
lane = lane)
rna.design
# and we can start with a simple model (back to this later)
load.model <- formula(~ genotype)
all.data <- DESeqDataSetFromTximport(txi, rna.design, design=load.model)
load.model <- formula(~ lane)
test_lane_effects <- DESeqDataSetFromTximport(txi,
rna.design, design=load.model)
test_lane_effects2 <- DESeq(test_lane_effects)
str(test_lane_effects2)
test_lane_effects2_results <- results(test_lane_effects2, alpha = 0.05)
summary(test_lane_effects2_results)
test_lane_effects2_results <- test_lane_effects2_results[order(test_lane_effects2_results$padj),]
test_lane_effects2_results
plotDispEsts(test_lane_effects2)
for_pca <- rlog(test_lane_effects2, blind=TRUE)
plotPCA(for_pca, intgroup=c("lane")) # no obvious lane effects.
?plotPCA
str(for_pca)
dim(for_pca)
getMethod("plotPCA","DESeqTransform")
plotPCA(for_pca, intgroup=c("genotype", "background"))
plotPCA(for_pca, ntop = 2000, intgroup=c("lane"))
plotPCA(for_pca, ntop = 5000, intgroup=c("lane"))
plotPCA(for_pca, ntop = 10000, intgroup=c("lane"))
plotPCA(for_pca, ntop = 2000, intgroup=c("genotype", "background"))
rlogMat <- assay(for_pca) # just making a matrix of the counts that have been corrected for over-dispersion in a "blind" fashion
distsRL <- dist(t(rlogMat)) # Computes a distance matrix (Euclidian Distance)
mat <- as.matrix(distsRL)  #
rownames(mat) <- colnames(mat) <-   with(colData(test_lane_effects2), paste(genotype, background, sep=" : "))
hc <- hclust(distsRL)  # performs hierarchical clustering
hmcol <- colorRampPalette(brewer.pal(9, "GnBu"))(100)
heatmap.2(mat, Rowv=as.dendrogram(hc),
symm=TRUE, trace="none",
col = rev(hmcol), margin=c(13, 13))
?heatmap.2
load.model <- formula(~ genotype)
test_genotype_effects <- DESeqDataSetFromTximport(txi,
rna.design, design=load.model)
test_genotype_effects2 <- DESeq(test_genotype_effects)
plotDispEsts(test_genotype_effects2)
plotMA(test_genotype_effects2, ylim =c(-1, 1))
dim(test_genotype_effects2)
plotMA(test_genotype_effects2, ylim =c(-2, 2))
print(test_genotype_effects2)
head(test_genotype_effects2)
str(test_genotype_effects2)
genotype_results <- results(test_genotype_effects2, alpha = 0.05)
print(genotype_results)
head(genotype_results)
summary(genotype_results)
genotype_results <- genotype_results[order(genotype_results$padj),]
genotype_results[1:10,]
load.model <- formula(~ lane + background + genotype) # Let me go over the matrix rank issue here
test_G <- DESeqDataSetFromTximport(txi,
rna.design, design=load.model)
test_G_2 <- DESeq(test_G)
plotDispEsts(test_G_2)
plotMA(test_G_2, ylim =c(-2, 2))
G_results <- results(test_G_2, alpha = 0.05, pAdjustMethod="BH")
summary(G_results)
G_results <- G_results[order(G_results$padj),]
G_results[1:10,]
genotype_results[1:10,]
load.model <- formula(~ genotype + background + genotype:background) # Let me go over the matrix rank issue here
test_GxB_effects <- DESeqDataSetFromTximport(txi,
rna.design, design=load.model)
test_GxB_effects2 <- DESeq(test_GxB_effects)
plotDispEsts(test_GxB_effects2)
plotMA(test_GxB_effects2, ylim =c(-2, 2))
load.model <- formula(~ lane + genotype + background + genotype:background) # Let me go over the matrix rank issue here
test_GxB_effects <- DESeqDataSetFromTximport(txi,
rna.design, design=load.model)
test_GxB_effects2 <- DESeq(test_GxB_effects)
plotDispEsts(test_GxB_effects2)
plotMA(test_GxB_effects2, ylim =c(-2, 2))
GxB_results <- results(test_GxB_effects2, alpha = 0.05, pAdjustMethod="BH")
summary(GxB_results)
load.model <- formula(~ lane + background + genotype + genotype:background) # Let me go over the matrix rank issue here
test_GxB_effects <- DESeqDataSetFromTximport(txi,
rna.design, design=load.model)
test_GxB_effects2 <- DESeq(test_GxB_effects)
plotDispEsts(test_GxB_effects2)
plotMA(test_GxB_effects2, ylim =c(-2, 2))
summary(GxB_results)
GxB_results <- GxB_results[order(GxB_results$padj),]
GxB_results[14,]
GxB_results[1:14,]
p_fake <- rbeta(12627, 1,1) # you could also use runif(12627,1,1)
hist(p_fake)
hist(GxB_results$pvalue)
res_contrast_genotype <- results(test_GxB_effects2,
contrast=c("genotype", "wt", "sdE3"),
pAdjustMethod="BH")
summary(res_contrast_genotype, alpha= 0.05)
attr(test_GxB_effects2, "modelMatrixType")   # how is it setting up the design matrix.
res_contrast_genotype <- res_contrast_genotype[order(res_contrast_genotype$padj),
res_contrast_genotype <- res_contrast_genotype[order(res_contrast_genotype$padj),
res_contrast_genotype[1:10,]
res_contrast_genotype <- res_contrast_genotype[order(res_contrast_genotype$padj),]
res_contrast_genotype[1:10,]
full.model <- formula(~ lane + genotype + background + genotype:background) # Let me go over the matrix rank issue here
reduced.model <- formula(~ lane + genotype + background) # Let me go over the matrix rank issue here
test_GxB_effects <- DESeqDataSetFromTximport(txi,
rna.design, design=load.model)
full.model <- formula(~  genotype + background + genotype:background) # Let me go over the matrix rank issue here
reduced.model <- formula(~  genotype + background) # Let me go over the matrix rank issue here
test_GxB_effects <- DESeqDataSetFromTximport(txi,
rna.design, design=load.model)
samples <- c("ORE_wt_rep1","ORE_wt_rep2","ORE_sdE3_rep1","ORE_sdE3_rep2","SAM_wt_rep1","SAM_wt_rep2","SAM_sdE3_rep1","SAM_sdE3_rep2","HYB_wt_rep1","HYB_wt_rep2","HYB_sdE3_rep1","HYB_sdE3_rep2")
files <- paste(samples, "_htseq_counts.txt", sep="")
backgrounds <- c(rep("ORE", 4), rep("SAM", 4), rep("HYB", 4))
genotypes <- c(rep(c("wt", "wt", "sdE3", "sdE3"), 3))
rna.design <- data.frame(sample=samples, file=files, background=backgrounds, genotype=genotypes)
getwd()
setwd("../data/HTseq_counts")
setwd("../")
getwd()
dir()
setwd("./HTseq_counts")
load.model <- formula(~ genotype)
all.data <- DESeqDataSetFromHTSeqCount(sampleTable=rna.design, directory="./counts", design=load.model)
all.data <- DESeqDataSetFromHTSeqCount(sampleTable=rna.design, directory="./", design=load.model)
head(all.data)
print(all.data)
str(all.data)
dir()
files <- paste(samples, "_htseq_counts.txt", sep="")
files
all.data[[1]]
all.data[[2]]
all.data[[3]]
all.data <- DESeq(all.data)
plotDispEsts(all.data)
head(all.data)
str(all.data)
?DESeqDataSetFromHTSeqCount
library(gplots)
samples <- c("ORE_w1_rep1","ORE_wt_rep2","ORE_sdE3_rep1","ORE_sdE3_rep2","SAM_wt_rep1","SAM_wt_rep2","SAM_sdE3_rep1","SAM_sdE3_rep2","HYB_wt_rep1","HYB_wt_rep2","HYB_sdE3_rep1","HYB_sdE3_rep2")
files <- paste(samples, "_htseq_counts.txt", sep="")
backgrounds <- c(rep("ORE", 4), rep("SAM", 4), rep("HYB", 4))
genotypes <- c(rep(c("wt", "wt", "sdE3", "sdE3"), 3))
rna.design <- data.frame(sample=samples, file=files, background=backgrounds, genotype=genotypes)
load.model <- formula(~ genotype)
all.data <- DESeqDataSetFromHTSeqCount(sampleTable=rna.design, directory="./", design=load.model)
samples <- c("ORE_wt_rep1","ORE_wt_rep2","ORE_sdE3_rep1","ORE_sdE3_rep2","SAM_wt_rep1","SAM_wt_rep2","SAM_sdE3_rep1","SAM_sdE3_rep2","HYB_wt_rep1","HYB_wt_rep2","HYB_sdE3_rep1","HYB_sdE3_rep2")
files <- paste(samples, "_htseq_counts.txt", sep="")
backgrounds <- c(rep("ORE", 4), rep("SAM", 4), rep("HYB", 4))
genotypes <- c(rep(c("wt", "wt", "sdE3", "sdE3"), 3))
rna.design <- data.frame(sample=samples, file=files, background=backgrounds, genotype=genotypes)
load.model <- formula(~ genotype)
#Now load the data into R
all.data <- DESeqDataSetFromHTSeqCount(sampleTable=rna.design, directory="./", design=load.model)
all.data <- DESeq(all.data)
genotype.results <- as.data.frame(results(all.data, alpha=0.05))
