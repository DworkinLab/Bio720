p_t1(w_AA = 1, w_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) +
(2 * w_Aa* p_t0 * (1 - p_t0)) +
(w_aa * (1- p_t0)^2)
p_t1 <- ((w_AA* p_t0^2) + (w_Aa)*p_t0*(1-p_t0)) / w_bar
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
haploid_selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store allele frequencies and mean pop fitness
p <- rep(NA,n)  # a vector to store allele frequencies
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2) # mean population fitness
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
}
return(p)
}
haploid_selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store allele frequencies and mean pop fitness
p <- rep(NA,n)  # a vector to store allele frequencies
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2) # mean population fitness
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
}
return(p)
}
p <- haploid_selection()
generations <- 1:length(p)
plot(p ~ generations, pch = 20,
ylab = "allele frequency",
xlab = "generation")
?print
diploid.selection <- function(p0 = 0.01, w_AA = 1, w_Aa = 0.9, w_aa, n = 100) {
# Initialize vectors to store p
p <- rep(NA,n)
# starting conditions
p[1] <- p0 # starting allele frequencies
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar <- (w_AA * p[i - 1]^2) +
(2 * w_Aa* p[i - 1] * (1 - p[i - 1])) +
(w_aa * (1- p[i - 1])^2)
p[i] <- ((w_AA * p[i - 1]^2) + (w_Aa)*p[i - 1]*(1-p[i - 1])) / w_bar
rm(w_bar)
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
cat("fixation of A1 does not occur, max. allele frequency is:", print(maxAlleleFreq, digits = 2) )
}
# Let's make the plot
par(mfrow=c(1,1))
# 1. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)",
pch = 20, col = "red", cex.lab = 1.5)
}
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa = 0.96, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.99, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 1, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 1.2, w_aa = 0.95, n = 1000)
diploid.selection <- function(p0 = 0.01, w_AA = 1, w_Aa = 0.9, w_aa, n = 100) {
# Initialize vectors to store p
p <- rep(NA,n)
# starting conditions
p[1] <- p0 # starting allele frequencies
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar <- (w_AA * p[i - 1]^2) +
(2 * w_Aa* p[i - 1] * (1 - p[i - 1])) +
(w_aa * (1- p[i - 1])^2)
p[i] <- ((w_AA * p[i - 1]^2) + (w_Aa)*p[i - 1]*(1-p[i - 1])) / w_bar
rm(w_bar)
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
cat("fixation of A1 does not occur, max. allele frequency is:", print(maxAlleleFreq, digits = 2) )
}
# Let's make the plot
par(mfrow=c(1,1))
# 1. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 1.2, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 0.98, w_Aa = 1, w_aa = 0.95, n = 1000)
diploid.selection <- function(p0 = 0.01, w_AA = 1, w_Aa = 0.9, w_aa, n = 100) {
# Initialize vectors to store p
p <- rep(NA,n)
# starting conditions
p[1] <- p0 # starting allele frequencies
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar <- (w_AA * p[i - 1]^2) +
(2 * w_Aa* p[i - 1] * (1 - p[i - 1])) +
(w_aa * (1- p[i - 1])^2)
p[i] <- ((w_AA * p[i - 1]^2) + (w_Aa)*p[i - 1]*(1-p[i - 1])) / w_bar
rm(w_bar)
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
writeLines("fixation of A1 does not occur, max. allele frequency is:", print(maxAlleleFreq, digits = 2) )
}
# Let's make the plot
par(mfrow=c(1,1))
# 1. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa = 0.96, n = 1000)
diploid.selection <- function(p0 = 0.01, w_AA = 1, w_Aa = 0.9, w_aa, n = 100) {
# Initialize vectors to store p
p <- rep(NA,n)
# starting conditions
p[1] <- p0 # starting allele frequencies
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar <- (w_AA * p[i - 1]^2) +
(2 * w_Aa* p[i - 1] * (1 - p[i - 1])) +
(w_aa * (1- p[i - 1])^2)
p[i] <- ((w_AA * p[i - 1]^2) + (w_Aa)*p[i - 1]*(1-p[i - 1])) / w_bar
rm(w_bar)
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
cat("fixation of A1 does not occur, max. allele frequency is: ", maxAlleleFreq)
}
# Let's make the plot
par(mfrow=c(1,1))
# 1. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa = 0.96, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 0.98, w_Aa = 1, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.975, w_aa = 0.95, n = 1000)
crap <- sample(c("A", "a"), 20, replace = 20)
crap
grep("A", crap)
?grep
grepl("A", crap)
sum(grepl("A", crap))
crap
crap <- sample(c("A", "a"), 20, replace = 20)
sum(grepl("A", crap))
crap <- sample(c("A", "a"), 20, replace = 20)
sum(grepl("A", crap))
GeneticDrift <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for ( i in 2:n) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1-p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
plot(x = 1:gen, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
GeneticDrift()
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for ( i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1-p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
plot(x = 1:gen, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for ( i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1-p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
plot(x = 1:gen, y = p, type = "l",
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
?table
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift_v2 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
return(p[gen])
}
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
Extinction_prob <- function( sims = 1000, alleles = 400, p0 = 0.5, gen = 100) {
end_alleles <- replicate(sims, GeneticDrift_v2)
sum(end_alleles == 0)/sims
}
Extinction_prob()
Extinction_prob <- function( sims = 1000, alleles = 400, p0 = 0.5, gen = 100) {
end_alleles <- replicate(sims,
GeneticDrift_v2(alleles = alleles, p0 = p0, gen = gen))
sum(end_alleles == 0)/sims
}
Extinction_prob()
GeneticDrift_v2 <- function(alleles, p0, gen, ...){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
return(p[gen])
}
Extinction_prob <- function( sims = 1000, alleles = 400, p0 = 0.5, gen = 100) {
end_alleles <- replicate(sims,
GeneticDrift_v2(alleles = alleles, p0 = p0, gen = gen))
return(sum(end_alleles == 0)/sims)
}
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.25, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.1, gen = 100)
GeneticDrift_v2 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
return(p[gen])
}
Extinction_prob(sims = 200, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 200, alleles = 400, p0 = 0.25, gen = 100)
Extinction_prob(sims = 200, alleles = 400, p0 = 0.1, gen = 100)
GeneticDrift_v3 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
GeneticDrift_v3 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
}
GeneticDrift_v3(40, 0.5, 100)
GeneticDrift_v3 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
return(p)
}
GeneticDrift_v3(40, 0.5, 100)
drift_frequencies <- replicate(sims,
GeneticDrift_v3(alleles = 200, p0 = 0.5, gen = gen), simplify= TRUE)
sims <- 100 # number of simulations
gen <- 100 # number of generations
# This repeats the simulation sims times.
drift_frequencies <- replicate(sims,
GeneticDrift_v3(alleles = 200, p0 = 0.5, gen = gen), simplify= TRUE)
drift_frequencies <- t(drift_frequencies)
matplot(t(drift_frequencies),
ylim = c(0, 1), type = "l", lty = 1, col = rainbow(SimNum), lwd =2,
ylab = "allele frequency", xlab = "generation",
main = " The influence of genetic drift on allele frequencies")
matplot(t(drift_frequencies),
ylim = c(0, 1), type = "l", lty = 1, col = rainbow(sims), lwd =2,
ylab = "allele frequency", xlab = "generation",
main = " The influence of genetic drift on allele frequencies")
drift_frequencies <- replicate(sims,
GeneticDrift_v3(alleles = 200, p0 = 0.5, gen = gen))
drift_frequencies <- t(drift_frequencies)
matplot(t(drift_frequencies),
ylim = c(0, 1), type = "l", lty = 1, col = rainbow(sims), lwd =2,
ylab = "allele frequency", xlab = "generation",
main = " The influence of genetic drift on allele frequencies")
drift_frequencies <- replicate(sims,
GeneticDrift_v3(alleles = 400, p0 = 0.5, gen = gen))
drift_frequencies <- t(drift_frequencies)
matplot(t(drift_frequencies),
ylim = c(0, 1), type = "l", lty = 1, col = rainbow(sims), lwd =2,
ylab = "allele frequency", xlab = "generation",
main = " The influence of genetic drift on allele frequencies")
summary(cars)
getwd()
ls()
StdErr <- function(x) {
se <- sd(x)/sqrt(length(x))
return(c(SE = se))
}
CoefVar <- function(x) {
cv <- sd(x)/mean(x)
return(c(CV = cv ))
}
ls()
class(CoefVar)
ls()
rm(list = ls())
ls()
ourData <- rnorm(100)
dir()
source("./SourcingFunctions.R")
source("SourcingFunctions.R")
source("./SourcingFunctions.R")
ls()
CoefVar(ourData)
StdErr(ourData)
edit(CoefVar)
source("./SourcingFunctions.R")
View(CoefVar)
View(CoefVar)
edit(CoefVar)
dll_data <- read.csv("http://beaconcourse.pbworks.com/w/file/fetch/35183279/dll.csv", header=TRUE)   #data frame input
rnorm(n = 1, mean = 0, sd =1)
n <- 100000
x <- rep(NA, n)
head(NA)
head(x)
for (i in 1:n) {
x[i] <- rnorm(n = 1, mean = 0, sd = 1)
}
head(x)
ourVals <- rnorm(n = 100000, mean = 0, sd = 1) # Is Rish way of doing this.
n <- 100000
x <- rep(NA, n) # pre-allocating an object (and memory!) for the object we are going to store values.
for (i in 1:n) {
x[i] <- rnorm(n = 1, mean = 0, sd = 1)
}
ourVals <- rnorm(n = 1000000, mean = 0, sd = 1) # Is Rish way of doing this.
n <- 1000000
x <- rep(NA, n) # pre-allocating an object (and memory!) for the object we are going to store values.
for (i in 1:n) {
x[i] <- rnorm(n = 1, mean = 0, sd = 1)
}
system.time(
ourVals <- rnorm(n = 1000000, mean = 0, sd = 1) # Is Rish way of doing this.
)
system.time(
n <- 1000000
x <- rep(NA, n) # pre-allocating an object (and memory!) for the object we are going to store values.
for (i in 1:n) {
x[i] <- rnorm(n = 1, mean = 0, sd = 1)
}
)
system.time(
n <- 1000000
x <- rep(NA, n) # pre-allocating an object (and memory!) for the object we are going to store values.
for (i in 1:n) {
x[i] <- rnorm(n = 1, mean = 0, sd = 1)
})
system.time(
n <- 1000000
x <- rep(NA, n)
for (i in 1:n) {
x[i] <- rnorm(n = 1, mean = 0, sd = 1)
})
system.time(
n <- 1000000
x <- rep(NA, n)
for (i in 1:n) {
x[i] <- rnorm(n = 1, mean = 0, sd = 1)
})
system.time(
for (i in 1:n){
x[i] <- rnorm(n=1, mean=0, sd=1) # for each i, one number is generated, and placed in x
})
system.time(
ourVals <- rnorm(n = 1000000, mean = 0, sd = 1) # Is Rish way of doing this.
)
n <- 1000000
x <- rep(NA, n)
system.time(
for (i in 1:n) {
x[i] <- rnorm(n = 1, mean = 0, sd = 1)
})
dll_data <- read.csv("http://beaconcourse.pbworks.com/w/file/fetch/35183279/dll.csv", header=TRUE)   #data frame input
dim(dll_data)
head(dll_data)
dll.data$temp <- factor(dll.data$temp)
dll.data$replicate <- factor(dll.data$replicate)
## Learning about apply like functions
dll_data$temp <- factor(dll_data$temp)
dll_data$replicate <- factor(dll_data$replicate)
CoefVar(dll_data$tarsus)
CoefVar(dll_data$tibia)
CoefVar(dll_data$femur)
View(CoefVar)
CoefVar <- function(x) {
x <- na.omit(x)
cv <- sd(x)/abs(mean(x))
return(c(CV = cv ))
}
CoefVar(dll_data$tarsus)
CoefVar(dll_data$tibia)
CoefVar(dll_data$femur)
CoefVar(dll_data[,5:8])
CoefVar(dll_data[,5:7])
CoefVar(as.matrix(dll_data[,5:7]))
ColMeans(as.matrix(dll_data[,5:7]))
colMeans(as.matrix(dll_data[,5:7]))
dll_data <- na.omit(dll_data)
colMeans(as.matrix(dll_data[,5:7]))
CV_variables <- rep(NA, 3)
names(dll_data)
for (i in 5:7) {
CV_variables[i] <- CoefVar(dll_data[, i])
}
CV_variables
i
CV_variables <- rep(NA, 3)
for (i in 1:3) {
CV_variables[i] <- CoefVar(dll_data[, i+4])
}
CV_variables
5:7
apply(dll_data[,5:8], MARGIN = 2, CoefVar)
apply(dll_data[,5:7], MARGIN = 2, CoefVar)
?apply
apply(X = dll_data[,5:7], MARGIN = 2, FUN = mean)
CV_variables2 <- apply(X = dll_data[,5:7], MARGIN = 2, FUN = CoefVar)
apply(X = dll_data[,5:7], MARGIN = 2, FUN = sd)
apply(X = dll_data[,5:7], MARGIN = 2, FUN = median)
