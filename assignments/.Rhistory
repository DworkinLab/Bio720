tail(gene_means)
head(gene_means_alt)
q()
rna_counts <- read.csv("eXpress_dm_counts.csv", h = T)
View(rna_counts)
names(rna_counts)
colnames(rna_counts)
grepl("hdhorn", names(rna_counts))
grepl("male_hdhorn", names(rna_counts))
sm_m_hd <- grepl("sm_male_hdhorn", names(rna_counts))
lg_m_hd <- grepl("lg_male_hdhorn", names(rna_counts))
sum(sm_m_hd)
sum(lg_m_hd)
sm_m_hd_dat <- rna_counts[, sm_m_hd]
lg_m_hd_dat <- rna_counts[, lg_m_hd]
dim(sm_m_hd_dat)
dim(lg_m_hd_dat)
head(sm_m_hd_dat)
mean_hd_horn_expression <- rowMeans(log2(cbind(sm_m_hd_dat, lg_m_hd_dat) + 0.0001))
dim(mean_hd_horn_expression)
length(mean_hd_horn_expression)
mean_lg_hd_horn_expression <- rowMeans(log2(lg_m_hd_dat + 0.0001))
mean_sm_hd_horn_expression <- rowMeans(log2(lg_m_hd_dat + 0.0001))
mean_sm_hd_horn_expression <- rowMeans(log2(sm_m_hd_dat + 0.0001))
mean_hd_horn_expression <- rowMeans(log2(cbind(sm_m_hd_dat, lg_m_hd_dat) + 0.0001))
length(mean_hd_horn_expression)
mean_lg_hd_horn_expression <- rowMeans(log2(lg_m_hd_dat + 0.0001))
mean_sm_hd_horn_expression <- rowMeans(log2(sm_m_hd_dat + 0.0001))
hd_horn_diff <- mean_lg_hd_horn_expression - mean_sm_hd_horn_expression
plot(y = hd_horn_diff, x = mean_hd_horn_expression,
pch = 20, col = "red",
ylab = "Difference of Large VS. Small head horns",
xlab = "Mean expression by gene")
mean_hd_horn_expression <- rowMeans(log2(cbind(sm_m_hd_dat, lg_m_hd_dat) + 0.01))
length(mean_hd_horn_expression)
mean_lg_hd_horn_expression <- rowMeans(log2(lg_m_hd_dat + 0.01))
mean_sm_hd_horn_expression <- rowMeans(log2(sm_m_hd_dat + 0.01))
hd_horn_diff <- mean_lg_hd_horn_expression - mean_sm_hd_horn_expression
plot(y = hd_horn_diff, x = mean_hd_horn_expression,
pch = 20, col = "red",
ylab = "Difference of Large VS. Small head horns",
xlab = "Mean expression by gene")
mean_hd_horn_expression <- rowMeans(log2(cbind(sm_m_hd_dat, lg_m_hd_dat) + 0.1))
length(mean_hd_horn_expression)
mean_lg_hd_horn_expression <- rowMeans(log2(lg_m_hd_dat + 0.1))
mean_sm_hd_horn_expression <- rowMeans(log2(sm_m_hd_dat + 0.1))
hd_horn_diff <- mean_lg_hd_horn_expression - mean_sm_hd_horn_expression
plot(y = hd_horn_diff, x = mean_hd_horn_expression,
pch = 20, col = "red",
ylab = "Difference of Large VS. Small head horns",
xlab = "Mean expression by gene")
plot(y = hd_horn_diff, x = mean_hd_horn_expression,
pch = 20, col = "#fe000032",
ylab = "log2 Difference of Large VS. Small head horns",
xlab = "log2 Mean expression by gene")
p_t1 <- function(w_AA, w_Aa, w_a, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*WAa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2)) +
p_t1 <- (w_AA/w_bar)* p_t0^2 + (W_Aa/W_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, W_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_a, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*WAa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2)) +
p_t1 <- (w_AA/w_bar)* p_t0^2 + (W_Aa/W_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, W_Aa = 0.975, W_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_a, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*W_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2)) +
p_t1 <- (w_AA/w_bar)* p_t0^2 + (W_Aa/W_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, W_Aa = 0.975, W_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_a, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2)) +
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_a, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2)) +
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2)) +
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2)) +
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2))
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
p_t1(w_AA = 1, w_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2))
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 0.95, w_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2))
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 1, w_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2))
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 1, w_aa = 0.99, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2))
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 1, w_aa = 0.99, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2*w_Aa*p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2))
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 1, w_aa = 0.999, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) + (2 * w_Aa* p_t0 * (1-p_t0)) + (w_aa * (1- p_t0^2))
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 1, w_aa = 0.999, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) +
(2 * w_Aa* p_t0 * (1 - p_t0)) +
(w_aa * (1- p_t0^2))
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 1, w_aa = 0.999, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) +
(2 * w_Aa* p_t0 * (1 - p_t0)) +
(w_aa * (1- p_t0)^2)
p_t1 <- (w_AA/w_bar)* p_t0^2 + (w_Aa/w_bar)*p_t0*(1-p_t0)
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 1, w_aa = 0.999, p_t0 = 0.5)
p_t1(w_AA = 1, w_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
p_t1 <- function(w_AA, w_Aa, w_aa, p_t0) {
w_bar <- (w_AA * p_t0^2) +
(2 * w_Aa* p_t0 * (1 - p_t0)) +
(w_aa * (1- p_t0)^2)
p_t1 <- ((w_AA* p_t0^2) + (w_Aa)*p_t0*(1-p_t0)) / w_bar
return(p_t1)}
p_t1(w_AA = 1, w_Aa = 0.975, w_aa = 0.95, p_t0 = 0.5)
haploid_selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store allele frequencies and mean pop fitness
p <- rep(NA,n)  # a vector to store allele frequencies
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2) # mean population fitness
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
}
return(p)
}
haploid_selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store allele frequencies and mean pop fitness
p <- rep(NA,n)  # a vector to store allele frequencies
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2) # mean population fitness
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
}
return(p)
}
p <- haploid_selection()
generations <- 1:length(p)
plot(p ~ generations, pch = 20,
ylab = "allele frequency",
xlab = "generation")
?print
diploid.selection <- function(p0 = 0.01, w_AA = 1, w_Aa = 0.9, w_aa, n = 100) {
# Initialize vectors to store p
p <- rep(NA,n)
# starting conditions
p[1] <- p0 # starting allele frequencies
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar <- (w_AA * p[i - 1]^2) +
(2 * w_Aa* p[i - 1] * (1 - p[i - 1])) +
(w_aa * (1- p[i - 1])^2)
p[i] <- ((w_AA * p[i - 1]^2) + (w_Aa)*p[i - 1]*(1-p[i - 1])) / w_bar
rm(w_bar)
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
cat("fixation of A1 does not occur, max. allele frequency is:", print(maxAlleleFreq, digits = 2) )
}
# Let's make the plot
par(mfrow=c(1,1))
# 1. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)",
pch = 20, col = "red", cex.lab = 1.5)
}
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa = 0.96, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.99, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 1, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 1.2, w_aa = 0.95, n = 1000)
diploid.selection <- function(p0 = 0.01, w_AA = 1, w_Aa = 0.9, w_aa, n = 100) {
# Initialize vectors to store p
p <- rep(NA,n)
# starting conditions
p[1] <- p0 # starting allele frequencies
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar <- (w_AA * p[i - 1]^2) +
(2 * w_Aa* p[i - 1] * (1 - p[i - 1])) +
(w_aa * (1- p[i - 1])^2)
p[i] <- ((w_AA * p[i - 1]^2) + (w_Aa)*p[i - 1]*(1-p[i - 1])) / w_bar
rm(w_bar)
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
cat("fixation of A1 does not occur, max. allele frequency is:", print(maxAlleleFreq, digits = 2) )
}
# Let's make the plot
par(mfrow=c(1,1))
# 1. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 1.2, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 0.98, w_Aa = 1, w_aa = 0.95, n = 1000)
diploid.selection <- function(p0 = 0.01, w_AA = 1, w_Aa = 0.9, w_aa, n = 100) {
# Initialize vectors to store p
p <- rep(NA,n)
# starting conditions
p[1] <- p0 # starting allele frequencies
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar <- (w_AA * p[i - 1]^2) +
(2 * w_Aa* p[i - 1] * (1 - p[i - 1])) +
(w_aa * (1- p[i - 1])^2)
p[i] <- ((w_AA * p[i - 1]^2) + (w_Aa)*p[i - 1]*(1-p[i - 1])) / w_bar
rm(w_bar)
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
writeLines("fixation of A1 does not occur, max. allele frequency is:", print(maxAlleleFreq, digits = 2) )
}
# Let's make the plot
par(mfrow=c(1,1))
# 1. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa = 0.96, n = 1000)
diploid.selection <- function(p0 = 0.01, w_AA = 1, w_Aa = 0.9, w_aa, n = 100) {
# Initialize vectors to store p
p <- rep(NA,n)
# starting conditions
p[1] <- p0 # starting allele frequencies
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar <- (w_AA * p[i - 1]^2) +
(2 * w_Aa* p[i - 1] * (1 - p[i - 1])) +
(w_aa * (1- p[i - 1])^2)
p[i] <- ((w_AA * p[i - 1]^2) + (w_Aa)*p[i - 1]*(1-p[i - 1])) / w_bar
rm(w_bar)
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
cat("fixation of A1 does not occur, max. allele frequency is: ", maxAlleleFreq)
}
# Let's make the plot
par(mfrow=c(1,1))
# 1. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.987, w_aa = 0.96, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 0.98, w_Aa = 1, w_aa = 0.95, n = 1000)
diploid.selection(p0 = 0.0001, w_AA = 1, w_Aa = 0.975, w_aa = 0.95, n = 1000)
crap <- sample(c("A", "a"), 20, replace = 20)
crap
grep("A", crap)
?grep
grepl("A", crap)
sum(grepl("A", crap))
crap
crap <- sample(c("A", "a"), 20, replace = 20)
sum(grepl("A", crap))
crap <- sample(c("A", "a"), 20, replace = 20)
sum(grepl("A", crap))
GeneticDrift <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for ( i in 2:n) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1-p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
plot(x = 1:gen, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
GeneticDrift()
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for ( i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1-p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
plot(x = 1:gen, y = p,
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for ( i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1-p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
plot(x = 1:gen, y = p, type = "l",
xlab="generations",
ylab="Allele frequency (p)", ylim = c(0,1),
pch = 20, col = "red", cex.lab = 1.5)
}
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.5, gen = 100)
?table
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift(alleles = 40, p0 = 0.1, gen = 100)
GeneticDrift_v2 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
return(p[gen])
}
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
GeneticDrift_v2(alleles = 40, p0 = 0.5, gen = 100)
Extinction_prob <- function( sims = 1000, alleles = 400, p0 = 0.5, gen = 100) {
end_alleles <- replicate(sims, GeneticDrift_v2)
sum(end_alleles == 0)/sims
}
Extinction_prob()
Extinction_prob <- function( sims = 1000, alleles = 400, p0 = 0.5, gen = 100) {
end_alleles <- replicate(sims,
GeneticDrift_v2(alleles = alleles, p0 = p0, gen = gen))
sum(end_alleles == 0)/sims
}
Extinction_prob()
GeneticDrift_v2 <- function(alleles, p0, gen, ...){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
return(p[gen])
}
Extinction_prob <- function( sims = 1000, alleles = 400, p0 = 0.5, gen = 100) {
end_alleles <- replicate(sims,
GeneticDrift_v2(alleles = alleles, p0 = p0, gen = gen))
return(sum(end_alleles == 0)/sims)
}
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.25, gen = 100)
Extinction_prob(sims = 100, alleles = 400, p0 = 0.1, gen = 100)
GeneticDrift_v2 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
return(p[gen])
}
Extinction_prob(sims = 200, alleles = 400, p0 = 0.5, gen = 100)
Extinction_prob(sims = 200, alleles = 400, p0 = 0.25, gen = 100)
Extinction_prob(sims = 200, alleles = 400, p0 = 0.1, gen = 100)
GeneticDrift_v3 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
GeneticDrift_v3 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
}
GeneticDrift_v3(40, 0.5, 100)
GeneticDrift_v3 <- function(alleles, p0, gen){
p <- rep(NA, gen)
p[1] <- p0
for (i in 2:gen) {
allele_counts <- sample(c("A", "a"),
size = alleles, replace = T,
prob = c(p[i-1], (1 - p[i-1])))
p[i] <- sum(grepl("A", allele_counts))/alleles # allele frequency of "A"
}
return(p)
}
GeneticDrift_v3(40, 0.5, 100)
drift_frequencies <- replicate(sims,
GeneticDrift_v3(alleles = 200, p0 = 0.5, gen = gen), simplify= TRUE)
sims <- 100 # number of simulations
gen <- 100 # number of generations
# This repeats the simulation sims times.
drift_frequencies <- replicate(sims,
GeneticDrift_v3(alleles = 200, p0 = 0.5, gen = gen), simplify= TRUE)
drift_frequencies <- t(drift_frequencies)
matplot(t(drift_frequencies),
ylim = c(0, 1), type = "l", lty = 1, col = rainbow(SimNum), lwd =2,
ylab = "allele frequency", xlab = "generation",
main = " The influence of genetic drift on allele frequencies")
matplot(t(drift_frequencies),
ylim = c(0, 1), type = "l", lty = 1, col = rainbow(sims), lwd =2,
ylab = "allele frequency", xlab = "generation",
main = " The influence of genetic drift on allele frequencies")
drift_frequencies <- replicate(sims,
GeneticDrift_v3(alleles = 200, p0 = 0.5, gen = gen))
drift_frequencies <- t(drift_frequencies)
matplot(t(drift_frequencies),
ylim = c(0, 1), type = "l", lty = 1, col = rainbow(sims), lwd =2,
ylab = "allele frequency", xlab = "generation",
main = " The influence of genetic drift on allele frequencies")
drift_frequencies <- replicate(sims,
GeneticDrift_v3(alleles = 400, p0 = 0.5, gen = gen))
drift_frequencies <- t(drift_frequencies)
matplot(t(drift_frequencies),
ylim = c(0, 1), type = "l", lty = 1, col = rainbow(sims), lwd =2,
ylab = "allele frequency", xlab = "generation",
main = " The influence of genetic drift on allele frequencies")
