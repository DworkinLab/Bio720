q()
q()
```{R}
sessionInfo()
Sys.info()
Sys.info()[["user"]]
```{R}
versionInfo()
```{R}
sessionInfo()
rna_counts <- read.table("https://raw.githubusercontent.com/DworkinLab/DrosophilaSociabilityTranscriptomics/main/data/star/star_count_matrix.txt",
header = TRUE)
dim(rna_counts)
str(rna_counts)
rna_counts2 <- rna_counts[, 2:143] # or [, -1]
rownames(rna_counts2) <- rna_counts$gene
rna_counts2[1:6, 1:6]
sample_names <- colnames(rna_counts2)
class(sample_names)
#install.packages("stringr") # only install once!
sample_names_matrix <- str_split_fixed(string = sample_names,
pattern = "_",
n = 7)
library("stringr")
sample_names_matrix <- str_split_fixed(string = sample_names,
pattern = "_",
n = 7)
# alternative (but can cause issues if there are problems with the delimiters)
sample_names_matrix2 <- str_split(string = sample_names,
pattern = "_",
simplify = TRUE)
colnames(sample_names_matrix) <- c("initials", "treatment", "lineage", "sex", "environment", "sample", "lane")
rownames(sample_names_matrix) <- sample_names
View(rna_counts)
rna_counts2[1:6, 1]
mean(rna_counts2[1:6, 1])
log2(rna_counts2[1:6, 1])
mean(log2(rna_counts2[1:6, 1]))
View(rna_counts2)
View(rna_counts2)
View(rna_counts2)
log2(2294)
log2(2295)
print(log2(2295), digits = 3)
print(log2(2295), digits = 4)
print(log2(2294), digits = 4)
print(log2(2294), digits = 5)
print(log2(2295), digits = 5)
View(rna_counts2)
View(rna_counts)
dim(rna_counts2)
142/8
142/10
142/11
142/12
142/13
142/14
142/16
142/17
pretend <- c(rep(30, 8), rep(0, 136))
mean(pretend)
rep(30, 8)
pretend <- c(rep(50, 8), rep(0, 136))
mean(pretend)
pretend <- c(rep(100, 8), rep(0, 136))
mean(pretend)
sum(pretend)
q()
# Chunk 1
read_1 <- "CGCGCAGTAGGGCACATGCCAGGTGTCCGCCACTTGGTGGGCACACAGCCGATGACGAACGGGCTCCTTGACTATAATCTGACCCGTTTGCGTTTGGGTGACCAGGGAGAACTGGTGCTCCTGC"
read_2 <- "AAAAAGCCAACCGAGAAATCCGCCAAGCCTGGCGACAAGAAGCCAGAGCAGAAGAAGACTGCTGCGGCTCCCGCTGCCGGCAAGAAGGAGGCTGCTCCCTCGGCTGCCAAGCCAGCTGCCGCTG"
read_3  <- "CAGCACGGACTGGGGCTTCTTGCCGGCGAGGACCTTCTTCTTGGCATCCTTGCTCTTGGCCTTGGCGGCCGCGGTCGTCTTTACGGCCGCGGGCTTCTTGGCAGCAGCACCGGCGGTCGCTGGC"
# Chunk 2
reads <- c(read_1, read_2, read_3)
nchar(reads)
# Chunk 3
for (i in read_1) {
print(i)
}
# Chunk 4
read_1_split <- strsplit(read_1, split = "", fixed = T) # a list
# Chunk 5
read_1_char <- as.character(unlist(read_1_split))
mode(read_1_char)
# Chunk 6
for (i in read_1_split){
print(i)
}
# Chunk 7
for (i in read_1_char){
print(i)
}
# Chunk 8
site_freq_list <- table(read_1_split)/lengths(read_1_split)
# or
site_freq_list_V2 <- table(read_1_split)/sum(table(read_1_split))
print(site_freq_list, digits = 2)
print(site_freq_list_V2, digits = 2)
# Chunk 9
site_freq_string <- table(read_1_char)/length(read_1_char)
site_freq_string_V2 <- table(read_1_char)/sum(table(read_1_char))
print(site_freq_string, digits = 2)
print(site_freq_string_V2, digits = 2)
# Chunk 10
BaseFrequencies <- function(x) {
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
# Chunk 11
BaseFrequencies_V2 <- function(x) {
tab <- table(x)/sum(table(x))
return(tab)
}
BaseFrequencies <- function(x) {
# if it is a single string still
if (length(x) == 1 & mode(x) == "character") {
x <- strsplit(x, split = "", fixed = T)
x <- as.character(unlist(x))
}
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
BaseFrequencies <- function(x) {
# if it is a single string still
if (length(x) == 1 & mode(x) == "character") {
x <- strsplit(x, split = "", fixed = T)
x <- as.character(unlist(x))
}
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
basefreq <- sapply(reads, BaseFrequencies, USE.NAMES = F)
print(basefreq, digits = 2)
getAnywhere(mean)
base:::mean
?messages
?message
?"stopifnot"
?try
?"try"
ratio_function_v2 <- function(x, y) {
if (length(x) != length(y)) stop("x and y are not the same length")
if (mode(x) != "numeric") stop("x is not numeric")
if (mode(y) != "numeric") stop("y is not numeric")
if (anyNA(x) || anyNA(y)) warning("missing data present")
ratio_xy <- na.rm(x)/na.rm(y)
return(c(ratio_variable = ratio_xy))
}
x <- rnorm(100, 10, 2)
y <- rnorm(100, 50, 3)
ratio_function_v2(x, y)
ratio_function_v2 <- function(x, y) {
if (length(x) != length(y)) stop("x and y are not the same length")
if (mode(x) != "numeric") stop("x is not numeric")
if (mode(y) != "numeric") stop("y is not numeric")
if (anyNA(x) || anyNA(y)) warning("missing data present")
ratio_xy <- na.omit(x)/na.omit(y)
return(c(ratio_variable = ratio_xy))
}
ratio_function_v2(x, y)
ratio_function_v2(x, y)
rm(x, y)
x
x <- rnorm(100, 10, 2)
y <- rnorm(100, 50, 3)
x
y
ratio_xy <- na.omit(x)/na.omit(y)
ratio_xy
ratio_function_v2 <- function(x, y) {
if (length(x) != length(y)) stop("x and y are not the same length")
if (mode(x) != "numeric") stop("x is not numeric")
if (mode(y) != "numeric") stop("y is not numeric")
if (anyNA(x) || anyNA(y)) warning("missing data present")
ratio_xy <- x/y
return(c(ratio_variable = ratio_xy))
}
ratio_function_v2(x, y)
a1 <- c("a", "b")
a2 <- 1:5
a12 <- c(a1, a2)
a12
q()
?which
?subset
?strsplit
?"sub"
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(1, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seq_gen()
seq_gen()
print("this is \"me\"")
writeLines("this is \"me\"")
fly_seq <- c(A = "ACTGGCCA", B = "ACTGGCCT", C = "ACTGTCCA" )
print(fly_seq)
writeLines(fly_seq, sep = " ")
cat(fly_seq, sep ="\n")
cat(fly_seq)
cat(fly_seq, sep ="\n")
cat(fly_seq)
variable_names <- paste("variable", 1:5, sep="_")
print(variable_names)
length(variable_names)
paste("x", 1:5, sep="", collapse = " + ")
rpois(1, 2000)
number_sequences <- rpois(1, 2000) # generating how many sequences in our sample
rpois(1, 2000)
number_sequences <- rpois(1, 2000) # generating how many sequences in our sample
# generating how many sequences
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(1, 100, 0.8),
replace = TRUE)
paste0(x, collapse="")
}
number_sequences <- rpois(1, 2000) # generating how many sequences in our sample
seqs <- replicate(number_sequences, seq_gen())
length(seqs)
nchar(seqs)
hist(nchar(seqs),
xlab = "length of DNA sequence",
ylab = "number of sequences")
BaseFrequencies <- function(x) {
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
basefreq <- sapply(seqs, BaseFrequencies, USE.NAMES = F)
head(basefreq)
basefreq <- sapply(seqs, BaseFrequencies, USE.NAMES = T)
basefreq
BaseFrequencies_V2 <- function(x) {
tab <- table(x)/sum(table(x))
return(tab)
}
BaseFrequencies_V2(seqs[1])
str(seqs)
BaseFrequencies <- function(x) {
# if it is a single string still
if (length(x) == 1 & mode(x) == "character") {
x <- strsplit(x, split = "", fixed = T)
x <- as.character(unlist(x))
}
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
basefreq <- sapply(seqs, BaseFrequencies, USE.NAMES = F)
basefreq
?str_count
C_count <- str_count(seqs, pattern = "C")
library(stringr)
library(stringi)
C_count <- str_count(seqs, pattern = "C")
G_count <- str_count(seqs, pattern = "G")
CG_perc <- (C_count + G_count)/nchar(seqs)
CG_perc
hist(CG_perc)
?nchar
read_1 <- "CGCGCAGTAGGGCACATGCCAGGTGTCCGCCACTTGGTGGGCACACAGCCGATGACGAACGGGCTCCTTGACTATAATCTGACCCGTTTGCGTTTGGGTGACCAGGGAGAACTGGTGCTCCTGC"
read_2 <- "AAAAAGCCAACCGAGAAATCCGCCAAGCCTGGCGACAAGAAGCCAGAGCAGAAGAAGACTGCTGCGGCTCCCGCTGCCGGCAAGAAGGAGGCTGCTCCCTCGGCTGCCAAGCCAGCTGCCGCTG"
read_3  <- "CAGCACGGACTGGGGCTTCTTGCCGGCGAGGACCTTCTTCTTGGCATCCTTGCTCTTGGCCTTGGCGGCCGCGGTCGTCTTTACGGCCGCGGGCTTCTTGGCAGCAGCACCGGCGGTCGCTGGC"
reads <- c(read_1, read_2, read_3)
nchar(reads)
str(reads)
str(seqs)
head(BaseFrequencies_V2(seqs))
head(BaseFrequencies(seqs))
BaseFrequencies <- function(x) {
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
BaseFrequencies(reads)
BaseFrequencies(reads[1])
BaseFrequencies_V2 <- function(x) {
tab <- table(x)/sum(table(x))
return(tab)
}
BaseFrequencies <- function(x) {
# if it is a single string still
if (length(x) == 1 & mode(x) == "character") {
x <- strsplit(x, split = "", fixed = T)
x <- as.character(unlist(x))
}
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
BaseFrequencies(reads[1])
BaseFrequencies(seqs[1])
basefreq <- sapply(reads, BaseFrequencies, USE.NAMES = F)
print(basefreq, digits = 2)
basefreq <- sapply(seqs, BaseFrequencies, USE.NAMES = F)
basefreq
head(basefreq)
str(reads)
str(seqs)
type(reads)
typeof(reads)
typeof(seqs)
basefreq <- sapply(seqs[1:10], BaseFrequencies, USE.NAMES = F)
basefreq
basefreq <- t(sapply(seqs, BaseFrequencies, USE.NAMES = F))
head(basefreq)
?str_count
C_count <- str_count(string = seqs, pattern = c("C", "G"))
head(basefreq)
CG_perc2 <- sum(basefreq[,2:3])
CG_perc2
CG_perc2 <- rowSums(basefreq[,2:3])
CG_perc2
dll_data = read.csv("http://beaconcourse.pbworks.com/f/dll.csv",
h = T, stringsAsFactors = TRUE)
summary(dll_data)
str(dll_data)
is.na(dll_data)
head(is.na(dll_data))
sum(is.na(dll_data))
anyNA(dll_data)
mean(dll_data$femur)
mean(dll_data$femur, na.rm = TRUE)
dll_data_complete <- na.omit(dll_data)
dim(dll_data)
dim(dll_data_complete)
dll_data <- na.omit(dll_data)
mean(dll_data$femur)
head(duplicated(dll_data))
tail(duplicated(dll_data))
sum(duplicated(dll_data))
any(duplicated(dll_data))
dll_data[anyDuplicated(dll_data),]
new_rows <- dll_data[sample(nrow(dll_data), size = 5, replace = T ),]
dll_data2 <- rbind(dll_data, new_rows)
str(dll_data2)
any(duplicated(dll_data2))
dll_data2[duplicated(dll_data2),]
dll_data_unique <- unique(dll_data2)
dim(dll_data_unique)
any(duplicated(dll_data_unique))
dim(dll_data2)
dim(dll_data)
rm(dll_data_complete, dll_data_unique, dll_data2)
dll_data_wt <- dll_data[dll_data$genotype == "wt",]
with(dll_data, table(genotype))
nrow(dll_data_wt)
levels(dll_data_wt$genotype)
as.numeric(dll_data$genotype)
levels(dll_data_wt$genotype)
?droplevels
dll_data_wt <- droplevels(dll_data_wt$genotype)
levels(dll_data_wt$genotype)
dll_data_wt <- droplevels(dll_data_wt)
levels(dll_data_wt$genotype)
dll_data_wt <- dll_data[dll_data$genotype == "wt",]
dll_data_wt <- droplevels(dll_data_wt)
levels(dll_data_wt$genotype)
edit(subset)
dll_data_Dll <- subset(dll_data, genotype == "Dll" )
dim(dll_data_Dll)
with(dll_data, table(genotype))
levels(dll_data_Dll$genotype)
dll_data_Dll <- droplevels(dll_data_Dll)
