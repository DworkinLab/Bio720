factor(temp,
labels = c("LowTemp", "HighTemp")))
str(temp_as_factor)
temp_as_factor2 <- with(dll_data, ifelse(temp == 25, "LowTemp",
ifelse(temp == 30, "HighTemp", NA)))
temp_as_factor2 <- factor(temp_as_factor2)
str(temp_as_factor2)
head(sort(dll_data$SCT))
tail(sort(dll_data$SCT))
head(order(dll_data$SCT))
?order
dll_data_sorted <- dll_data[order(dll_data$SCT),]
head(dll_data_sorted)
line_names <- dll_data$line
levels(line_names)
elevations <- c(100, 300, 270, 250, 500, 900, 500, 1100, 500,
3000,500, 570, 150, 800, 600, 500, 1900, 100,
300, 270, 250, 500, 900, 500, 1100, 500, 600)
MeanDayTimeTemp <- c(rnorm(27, mean = 20, sd = 5))
elevation_data <- data.frame(levels(line_names),
elevations,
MeanDayTimeTemp)
line_names <- dll_data$line
levels(line_names)
str( dll_data$line)
line_names <- as.factor(dll_data$line)
levels(line_names)
elevations <- c(100, 300, 270, 250, 500, 900, 500, 1100, 500,
3000,500, 570, 150, 800, 600, 500, 1900, 100,
300, 270, 250, 500, 900, 500, 1100, 500, 600)
MeanDayTimeTemp <- c(rnorm(27, mean = 20, sd = 5))
elevation_data <- data.frame(levels(line_names),
elevations,
MeanDayTimeTemp)
elevation_data
dll_data
names(dll_data)
names(elevation_data)
names(elevation_data)[1] <- "line"
str(elevation_data)
merged_data <- merge(x = elevation_data,
y = dll_data,
sort = TRUE)
merged_data
View(merged_data)
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
library(Biostrings)
install.packages("BiocManager")
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
BiocManager::install("BSgenome")
BiocManager::\link{repositories}()
BiocManager::{repositories}()
BiocManager::repositories()
BiocManager::update.packages()
update.packages()
BiocManager::available()
BiocManager::valid()
BiocManager::install("loo", update = TRUE, ask = FALSE, force = TRUE)
BiocManager::valid()
available.genomes()
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
available.genomes()
install.packages("Matrix")
library(BiocManager) # current way
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
available.genomes()
BiocManager::install("BSgenome.Dmelanogaster.UCSC.dm6")
BiocManager::install("BSgenome.Dmelanogaster.UCSC.dm6")
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
class(BSgenome.Dmelanogaster.UCSC.dm6)
typeof(BSgenome.Dmelanogaster.UCSC.dm6) # an S4 object
str(BSgenome.Dmelanogaster.UCSC.dm6)  # not so useful from a bioinformatics analysis perspective
BSgenome.Dmelanogaster.UCSC.dm6
Dm6
?available.genomes
av_gen <- available.genomes(splitNameParts=TRUE)
table(av_gen$organism)
table(av_gen$provider)
av_gen$organism
str(av_gen$organism)
str(av_gen)
View(av_gen)
av_gen[av_gen$organism == "Dmelanogaster",]
length(Dm6)  # this is how many "chromosomes" (usually contigs) in this genome
names(Dm6)
names(Dm6)[1:8]
length(names(Dm6)) # same as length of the genome BSgenome object
?BiocGenerics
show(Dm6)
organism(Dm6)
isS4(Dm6)
seqlengths(Dm6) # length of each contig.
head(sort(seqlengths(Dm6), decreasing  = TRUE))
seqinfo(Dm6)
sort(names(Dm6))
sort(Dm6)
alphabetFrequency(Dm6$chr2R)
? alphabetFrequency
alphabetFrequency(Dm6$chr2R, as.prob = TRUE)
alphabetFrequency(Dm6$chr2R,
letters = c("A", "C", "G", "T")
as.prob = TRUE)
alphabetFrequency(Dm6$chr2R,
letters = c("A", "C", "G", "T"),
as.prob = TRUE)
letterFrequency(Dm6$chr2R,
letters = c("A", "C", "G", "T"),
as.prob = TRUE)
letterFrequency(Dm6$chr2R,
letters = c("ACTTGACAA"))
dinucleotideFrequency(Dm6$chr2R)
trinucleotideFrequency(Dm6$chr2R)
dinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
trinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
oligonucleotideFrequency(Dm6$chr2R, width = 6, as.prob = TRUE)
?oligonucleotideTransition
?oligonucleotideTransitions
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, width = 2, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, 2, as.prob = TRUE)
dm_chrX <- getSeq(Dm6, names = "chrX")
dm_chrX
show(dm_chrX)
print(dm_chrX)
class(dm_chrX) # This is now a DNAString type object, not a BSgenome object
typeof(dm_chrX)
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
nchar(dm_chrX)/1e6
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
nchar(dm_chrX)/1e6
show(dm_chrX)
print(dm_chrX)
alphabetFrequency(dm_chrX, baseOnly = T, as.prob = T)
dm_chr3L <- getSeq(Dm6, names = "chr3L",
start = 1000000,
end = 2000000,
strand = "-")
alphabetFrequency(dm_chr3L, baseOnly = T, as.prob = T)
seqs <- c("CCCGGG", "CCCCTTTT", "AAATTT", "TAGCT")
n = sapply(seqs, function(x) countPattern(x, dm_chrX ))
n
which.max(n)
?countPattern
seqs2 <- c("CCCNGG", "CCCNTTTT", "AAANTT", "TAGNT")
n = sapply(seqs2, function(x) countPattern(x, dm_chrX, fixed = FALSE ))
n
which.max(n)
data(HNF4alpha)
HNF4alpha
class(HNF4alpha)
HNF4alpha
View(HNF4alpha)
str(HNF4alpha)
?HNF4alpha
?DNAStringSet
object.size(HNF4alpha)
length(HNF4alpha)
rc_dm_chr3L <- reverseComplement(dm_chr3L)
pfm <- consensusMatrix(HNF4alpha)
pfm
print(HNF4alpha)
unlist(HNF4alpha)
HNF4alpha[1:71,]
HNF4alpha[1:10,]
HNF4alpha[1:20,]
round(pfm[1:4,]/colSums(pfm[1:4,]), 2)
class(pfm)
pwm <- PWM(pfm)
pwm <- PWM(HNF4alpha,
type = "prob")
pwm
round(pwm[1:4,]/colSums(pwm[1:4,]), 2)
maxWeights(pwm)
?maxWeights
conMat <- consensusMatrix(HNF4alpha, as.prob = T)[1:4,]
seqLogo(conMat)
seqLogo(pwm[1:4,]/colSums(pwm[1:4,]))
TF_hits <- matchPWM(pwm, dm_chrX, with.score = TRUE)
length(TF_hits)
head(mcols(TF_hits)$score)
hist(mcols(TF_hits)$score)
?matchPWM
TF_hits_rc <- matchPWM(reverseComplement(pwm), dm_chrX, with.score = TRUE)
length(TF_hits_rc)
hist(mcols(TF_hits_rc)$score)
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
up10000seqs <- extractUpstreamSeqs(dm, dm_txdb, width=10000)
dm_txdb
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
up10000seqs <- extractUpstreamSeqs(dm, dm_txdb, width=10000)
? makeTxDbFromUCSC
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
Dm6
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
up10000seqs <- extractUpstreamSeqs(dm, dm_txdb, width=10000)
dm6
dm_txdb <- makeTxDbFromUCSC("dm6")
?makeTxDbFromUCSC
q()
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
available.genomes()
?available.genomes
av_gen <- available.genomes(splitNameParts=TRUE)
table(av_gen$organism)
View(av_gen)
View(av_gen)
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
class(BSgenome.Dmelanogaster.UCSC.dm6)
typeof(BSgenome.Dmelanogaster.UCSC.dm6) # an S4 object
str(BSgenome.Dmelanogaster.UCSC.dm6)  # not so useful from a bioinformatics analysis perspective, but notice the "@" not "$"
length(Dm6)  # this is how many "chromosomes" (usually contigs, not actual chromosomes) in this genome
names(Dm6)
names(Dm6)[1:8]
length(names(Dm6)) # same as length of the genome BSgenome object
seqlengths(Dm6) # length of each contig.
head(sort(seqlengths(Dm6), decreasing  = TRUE))
seqinfo(Dm6)
sum(seqlengths(Dm6)[1:8])
sum(seqlengths(Dm6)[1:8])/1e6  # Mbp
alphabetFrequency(Dm6$chr2R)
alphabetFrequency(Dm6$chr2R, as.prob = TRUE)
dinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
oligonucleotideFrequency(Dm6$chr2R, width = 6, as.prob = TRUE)
hexamers <- oligonucleotideFrequency(Dm6$chr2R,
width = 6, as.prob = TRUE)
head(hexamers)
hexamers[rownames(hexamers) = c( "AAAAAA", "TTTTTT",
"GGGGGG", "CCCCCC")]
hexamers[rownames(hexamers) == c( "AAAAAA", "TTTTTT",
"GGGGGG", "CCCCCC")]
names(hexamers)
hexamers[names(hexamers) == c( "AAAAAA", "TTTTTT",
"GGGGGG", "CCCCCC")]
hexamers[names(hexamers) == c( "AAAAAA", "ATTGCC", "GGGGGG", "CCCCCC")]
hexamers[names(hexamers) == c("TTTTTT", "AAAAAA",
"GGGGGG", "CCCCCC")]
hexamers[names(hexamers) == c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
hexamers[names(hexamers) %in% c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
head(hexamers)
dm_chrX <- getSeq(Dm6, names = "chrX")
dm_chrX
show(dm_chrX)
print(dm_chrX)
class(dm_chrX) # This is now a DNAString type object, not a BSgenome object
typeof(dm_chrX)
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
blah <- "ATGTATAGTAATA"
length(blah)
methods(length)
nchar(dm_chrX)/1e6
alphabetFrequency(dm_chrX, baseOnly = T, as.prob = T)
dm_chr3L <- getSeq(Dm6, names = "chr3L",
start = 1000000,
end = 2000000,
strand = "-")
alphabetFrequency(dm_chr3L, baseOnly = T, as.prob = T)
rc_dm_chr3L <- reverseComplement(dm_chr3L)
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, 2, as.prob = TRUE)
seqs <- c("CCCGGG", "CCCCTTTT", "AAATTT", "TAGCT")
n = sapply(seqs, function(x) countPattern(x, dm_chrX ))
n
which.max(n)
?countPattern
seqs2 <- c("CCCNGG", "CCCNTTTT", "AAANTT", "TAGNT")
n = sapply(seqs2, function(x) countPattern(x, dm_chrX, fixed = FALSE ))
n
which.max(n)
data(HNF4alpha)
HNF4alpha
pfm <- consensusMatrix(HNF4alpha)
pfm
round(pfm[1:4,]/colSums(pfm[1:4,]), 2)
class(pfm)
pfm
pwm <- PWM(pfm)
pwm <- PWM(HNF4alpha,
type = "prob")
pwm
maxWeights(pwm)
conMat <- consensusMatrix(HNF4alpha, as.prob = T)[1:4,]
conMat
seqLogo(conMat)
rna_counts <- read.table("https://raw.githubusercontent.com/DworkinLab/DrosophilaSociabilityTranscriptomics/main/data/star/star_count_matrix.txt",
header = TRUE)
dim(rna_counts)
str(rna_counts)
nrow(rna_counts)
ncol(rna_counts)
anyNA(rna_counts)
class(rna_counts)
mode(rna_counts)
rna_counts[1:6, 1:6]
rownames(rna_counts)[1:6]
rna_counts2 <- rna_counts[, 2:143] # or [, -1]
rownames(rna_counts2) <- rna_counts$gene
rna_counts2[1:6, 1:6]
View(rna_counts2)
colnames(rna_counts2)
sample_names <- colnames(rna_counts)
class(sample_names)
sample_names <- colnames(rna_counts2)
class(sample_names)
sample_names
str_split_fixed
str_split_fixed()
library("stringr")
?str_split_fixed
sample_names_matrix <- str_split_fixed(string = sample_names,
pattern = "_",
n = 7)
sample_names_matrix2 <- str_split(string = sample_names,
pattern = "_",
simplify = TRUE)
View(sample_names_matrix)
colnames(sample_names_matrix) <- c("initials", "treatment", "lineage", "sex", "environment", "sample", "lane")
View(sample_names_matrix)
View(rna_counts2)
rownames(sample_names_matrix) <- sample_names
View(sample_names_matrix)
View(rna_counts2)
sum(rna_counts2[,1])
sum(rna_counts2[,2])
read_sums <- colSums(rna)
read_sums <- colSums(rna_counts)
read_sums <- colSums(rna_counts2)
length(read_sums)
read_sums
apply(X = rna_counts2, MARGIN = 2, sum)
read_sums
read_sums_alt2 <- rep(NA,ncol(rna_counts2))
read_sums_alt2
?rep
for (i in 1:ncol(rna_counts2)) {
read_sums_alt2[i] <- sum(rna_counts2[, i])
}
read_sums_alt1 <- apply(X = rna_counts2, MARGIN = 2, sum)
read_sums_alt2
names(read_sums_alt2) <- colnames(rna_counts2)
length(read_sums_alt2)
head(read_sums_alt2)
read_sums_alt2 <- rep(x = NA,
times = ncol(rna_counts2))
names(read_sums_alt2) <- colnames(rna_counts2)
length(read_sums_alt2)
head(read_sums_alt2)
for (i in 1:ncol(rna_counts2)) {
read_sums_alt2[i] <- sum(rna_counts2[, i])
}
i
rm(i)
head(read_sums)
head(read_sums_alt1)
head(read_sums_alt2)
?colSums
seq_along()
seq_along
?seq_along
fly_seq <- c(A = "ACTGGCCA", B = "ACTGGCCT", C = "ACTGTCCA" )
print(fly_seq)
writeLines(fly_seq)
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(100, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(100, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seq_gen
seq_gen()
rbinom(100, 100, 0.8)
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(1, 100, 0.8),
replace = T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
seqs
rbinom(1, 100, 0.8)
?rbinom
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(100, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(1, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
length(seqs)
nchar(seqs)
str_length(seqs)
library(stringr)
library(stringi)
library(tidytext)
length(seqs)
nchar(seqs)
str_length(seqs)
stri_length(seqs)
library(BiocManager)
BiocManager::install(c("BSgenome", "GenomicFeatures", "Biostrings", "seqLogo"))
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
BiocManager::available()
available.genomes()
BiocManager::install("BSgenome.Dmelanogaster.UCSC.dm6")
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
Dm6
str(BSgenome.Dmelanogaster.UCSC.dm6)  # not so useful from a bioinformatics analysis perspective, but notice the "@" not "$"
length(Dm6)  # this is how many "chromosomes" (usually contigs, not actual chromosomes) in this genome
names(Dm6)
names(Dm6)[1:8]
?BiocGenerics
show(Dm6)
organism(Dm6)
isS4(Dm6)
seqlengths(Dm6) # length of each contig.
seqinfo(Dm6)
alphabetFrequency(Dm6$chr2R, as.prob = TRUE)
dinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
?alphabetFrequency
hasOnlyBaseLetters(Dm6$chr2R, as.prob = TRUE)
hasOnlyBaseLetters(Dm6$chr2R)
letterFrequency(Dm6$chr2R, letters = c("A", "C", "T", G), as.prob = TRUE)
letterFrequency(Dm6$chr2R, letters = c("A", "C", "T", "G"), as.prob = TRUE)
letterFrequencyInSlidingView(Dm6$chr2R, view.width = 10^6, letters = c("A", "C", "T", "G"), as.prob = TRUE)
letterFrequencyInSlidingView(Dm6$chr2R, view.width = 10^5, letters = c("A", "C", "T", "G"), as.prob = TRUE)
letterFrequencyInSlidingView(Dm6$chr2R, view.width = c(1000, 1000, 10^6), letters = c("A", "C", "T", "G"), as.prob = TRUE)
letterFrequencyInSlidingView(Dm6$chr2R, view.width = 100000, letters = c("A", "C", "T", "G"), as.prob = TRUE)
hexamers <- oligonucleotideFrequency(Dm6$chr2R,
width = 6, as.prob = TRUE)
head(hexamers)
hexamers[names(hexamers) %in% c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
hexamers
hexamers[names(hexamers) %in% c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
dm_chrX <- getSeq(Dm6, names = "chrX")
dm_chrX
show(dm_chrX)
class(dm_chrX) # This is now a DNAString type object, not a BSgenome object
typeof(dm_chrX)
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
nchar(dm_chrX)/1e6
alphabetFrequency(dm_chrX, baseOnly = T, as.prob = T)
seqs <- c("CCCGGG", "CCCCTTTT", "AAATTT", "TAGCT")
n = sapply(seqs, function(x) countPattern(x, dm_chrX ))
n
which.max(n)
data(HNF4alpha)
HNF4alpha
print(HNF4alpha)
length(HNF4alpha)
class(HNF4alpha)
pfm <- consensusMatrix(HNF4alpha)
pfm
round(pfm[1:4,]/colSums(pfm[1:4,]), 2)
class(pfm)
pwm <- PWM(pfm)
pwm <- PWM(HNF4alpha,
type = "prob")
round(pwm[1:4,]/colSums(pwm[1:4,]), 2)
maxWeights(pwm)
conMat <- consensusMatrix(HNF4alpha, as.prob = T)[1:4,]
seqLogo(conMat)
TF_hits <- matchPWM(pwm, dm_chrX, with.score = TRUE)
length(TF_hits)
head(mcols(TF_hits)$score)
hist(mcols(TF_hits)$score)
TF_hits_rc <- matchPWM(reverseComplement(pwm), dm_chrX, with.score = TRUE)
length(TF_hits_rc)
hist(mcols(TF_hits_rc)$score)
