BaseFrequencies <- function(x) {
# if it is a single string still
if (length(x) == 1 & mode(x) == "character") {
x <- strsplit(x, split = "", fixed = T)
x <- as.character(unlist(x))
}
if (mode(x) == "list") {
tab <- table(x)/lengths(x)
seq_len <- lengths(x)}
else {
tab <- table(x)/length(x)
seq_len <- length(x)
}
#return(c(tab, sequence_length = seq_len))  # as a vector
return(list(seq_frequencies = tab, sequence_length = seq_len)) # as a list
}
BaseFrequencies(read_1)
read1_split <- strsplit(read1, split = "", fixed = T)
read1_split <- strsplit(read_1, split = "", fixed = T)
read1_split
str(read1_split)
BaseFrequencies(read1_split)
read1_split <- strsplit(read_1, split = "", fixed = T)
read1_split <- as.character(unlist(read1_split))
str(read1_split)
BaseFrequencies(read1_split)
knitr::opts_chunk$set(echo = TRUE, error =T)
install.packages("tidytext")
library(stringr)
library(stringi)
library(tidytext)
print("this is \"me\"")
writeLines("this is \"me\"")
fly_seq <- c(A = "ACTGGCCA", B = "ACTGGCCT", C = "ACTGTCCA" )
print(fly_seq)
writeLines(fly_seq)
writeLines(fly_seq, sep ="\n")
cat(fly_seq, sep ="\n")
paste("x", 1:5, sep="", collapse = " + ")
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(100, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
length(seqs)
nchar(seqs)
str_length(seqs)
stri_length(seqs)
devtools::install_github("ropenscilabs/gutenbergr")
library(gutenbergr)
library(tidyverse)
books <- gutenberg_works(grepl(title,
pattern = "On the origin of species",
ignore.case = TRUE))
books
books[["title"]]
books %>% select(title)
books$title[1]
species <- gutenberg_download(1228)
str(species)
head(species$text)
species_text <- species$text
knitr::opts_chunk$set(echo = TRUE, error =T)
fly_seq <- c(A = "ACTGGCCA", B = "ACTGGCCT", C = "ACTGTCCA" )
print(fly_seq)
writeLines(fly_seq)
head(species$text)
str(species)
species_text <- species$text
empty <- sum(stri_isempty(species_text))/length(species_text)
dim(empty)
empty
stri_isempty(species_text)
sum(stri_isempty(species_text))
grep("INTRODUCTION\\.",species_text, ignore.case = F)
str_detect(species_text, "INTRODUCTION\\.")
sum(str_detect(species_text, "INTRODUCTION\\."))
grep("INTRODUCTION\\.",species_text, ignore.case = F)
?str_subset
str_subset(species_text, "INTRODUCTION\\."))
str_subset(species_text, "INTRODUCTION\\.")
grep("INTRODUCTION\\.",species_text, ignore.case = F)
?grep
length(grep("INTRODUCTION\\.",species_text, ignore.case = F))
str_subset(species_text, "INTRODUCTION\\.")
str_detect(species_text, "INTRODUCTION\\.")
sum(str_detect(species_text, "INTRODUCTION\\."))
sum(str_subset(species_text, "INTRODUCTION\\."))
str_subset(species_text, "INTRODUCTION\\.")
str_subset(species_text, "INTRODUCTION\\.")
species_text[c(49, 275)]
grep("INTRODUCTION\\.",species_text, ignore.case = F)
species_text[c(49, 281)]
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text):(grep("^INDEX\\.", text))-1)
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text):(grep("^INDEX\\.", text))-1)
species_slice
grep("^[0-9]+\\.", species_slice$text, value=TRUE)
grep("^[0-9]+\\.", species_slice$text, value=TRUE)
length(species_slice$text)
sum(nzchar(species_slice$text))
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text):(grep("^INDEX\\.", text))-1)
?slice
grep("^INTRODUCTION\\.", text)
text
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", species_text):(grep("^INDEX\\.", species_text)) - 1)
grep("^INTRODUCTION\\.", species_text)
grep("^INDEX\\.", species_text)
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", species_text)[2]:(grep("^INDEX\\.", species_text)) - 1)
species_slice
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", species_text)[1]:(grep("^INDEX\\.", species_text)) - 1)
species_slice
grep("^[0-9]+\\.", species_slice$text, value=TRUE)
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text)[1]:(grep("^INDEX\\.", text)) - 1)
species_slice
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text)[2]:(grep("^INDEX\\.", text)) - 1)
species_slice$text
grep("^[0-9]+\\.", species_slice$text, value=TRUE)
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text)[1]:(grep("^INDEX\\.", text)) - 1)
grep("^[0-9]+\\.", species_slice$text, value=TRUE)
grep("^[0-9]+\.", species_slice$text, value=TRUE)
species_slice$text[1:10]
books[["title"]]
books
books$title[1]
species <- gutenberg_download(22764)
species_text <- species$text
empty <- sum(stri_isempty(species_text))/length(species_text)
empty
length(grep("INTRODUCTION\\.",species_text, ignore.case = F)) # provides the positions in the text
sum(str_detect(species_text, "INTRODUCTION\\.")) #boolean for each word
length(str_subset(species_text, "INTRODUCTION\\.")) # equivalent to the grep statement
species_text[c(49, 68, 281)]  # each word position in the text with INTRODUCTION.
grep("INTRODUCTION\\.",species_text, ignore.case = F)
species_text[c(301)]  # each word position in the text with INTRODUCTION.
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text)[1]:(grep("^INDEX\\.", text)) - 1)
grep("^[0-9]+\\.", species_slice$text, value=TRUE)
books$title[1]
books
books %>% select(title)
species <- gutenberg_download(1228)
species_text <- species$text
empty <- sum(stri_isempty(species_text))/length(species_text)
empty
length(grep("INTRODUCTION\\.",species_text, ignore.case = F)) # provides the positions in the text
sum(str_detect(species_text, "INTRODUCTION\\.")) #boolean for each word
length(str_subset(species_text, "INTRODUCTION\\.")) # equivalent to the grep statement
species_text[c(301)]  # each word position in the text with INTRODUCTION.
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text)[1]:(grep("^INDEX\\.", text)) - 1)
grep("INTRODUCTION\\.",species_text, ignore.case = F)
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text)[1]:(grep("^INDEX\\.", text)) - 1)
head(species_slice)
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text)[2]:(grep("^INDEX\\.", text)) - 1)
head(species_slice)
grep("VARIATION UNDER DOMESTICATION", species_slice$text, value=TRUE)
grep("VARIATION UNDER DOMESTICATION", species_slice$text, value=F)
species_slice$text[171:173]
grep("^CHAPTER+\\.", species_slice$text, value=TRUE)
grep("^CHAPTER.", species_slice$text, value=TRUE)
grep("^CHAPTER", species_slice$text, value=TRUE)
length(species_slice$text)
sum(nzchar(species_slice$text))
species_filtered <- species %>%
slice(grep("^INTRODUCTION\\.", text):(grep("^INDEX\\.", text))-1) %>%
filter(nzchar(text)) %>%
mutate(linenumber = row_number(),
chapter = cumsum(grepl("^[0-9]+\\.", text)))
species_filtered
species_filtered$text <- toupper(species_filtered$text)
head(species_filtered$text)
species_tidy <- species_filtered %>%
unnest_tokens(word, text)
species_tidy <- species_tidy %>%
anti_join(stop_words)
word_counts_10 <- species_tidy %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
mutate(word = reorder(word, n))
word_counts_10
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
species_tidy %>%
count(word, sort = TRUE) %>%
top_n(25) %>%
mutate(word = reorder(word, n)) %>%
with(wordcloud(word, n, random.order = F, max.words  = 25, colors = rainbow(8)))
word_counts_25 <- species_tidy %>%
count(word, sort = TRUE) %>%
top_n(25) %>%
mutate(word = reorder(word, n))
word_counts_25 <- data.frame(word_counts_25)
with(word_counts_25,
wordcloud(word, n, random.order = F, max.words = 25, col = rainbow(n = 5)))
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
BiocManager::install(c("MotifDb",
"TxDb.Scerevisiae.UCSC.sacCer3.sgdGene",
"org.Sc.sgd.db", "BSgenome.Scerevisiae.UCSC.sacCer3",
"motifStack", "seqLogo"))
library(MotifDb)
library(S4Vectors)
library(seqLogo)
library(motifStack)
library(Biostrings)
library(GenomicFeatures)
library(org.Sc.sgd.db)
library(BSgenome.Scerevisiae.UCSC.sacCer3)
library(TxDb.Scerevisiae.UCSC.sacCer3.sgdGene)
query(MotifDb, "DAL80")
#query(MotifDb, 'Dmelanogaster')
pfm.dal80.jaspar <- query(MotifDb,"DAL80")[[1]]
class(pfm.dal80.jaspar)
pfm.dal80.jaspar
seqLogo(pfm.dal80.jaspar)
#library(BiocInstaller) # old deprecated
library(BiocManager) # new way
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library('BSgenome')
#library(BiocInstaller) # old deprecated
library(BiocManager) # new way
library(Biostrings)
BiocManager::install("BSgenome")
BiocManager::install("Biostrings")
BiocManager::install("Biostrings")
library(Biostrings)
BiocManager::install("GenomeInfoDbData")
BiocManager::install("GenomicRanges")
BiocManager::install("GenomicFeatures")
#library(BiocInstaller) # old deprecated
library(BiocManager) # new way
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library('BSgenome')
available.genomes()
#biocLite("BSgenome.Dmelanogaster.UCSC.dm6")
BiocManager::install("BSgenome.Dmelanogaster.UCSC.dm6")
library(BSgenome.Dmelanogaster.UCSC.dm6)
dm <- BSgenome.Dmelanogaster.UCSC.dm6
length(dm)
names(dm)
show(dm)
organism(dm)
seqinfo(dm)
isS4(dm)
seqlengths(BSgenome.Dmelanogaster.UCSC.dm6)
alphabetFrequency(dm$chr2R,
baseOnly = T, as.prob = T)
seqlengths(BSgenome.Dmelanogaster.UCSC.dm6)
length(dm)
names(dm)
seqinfo(dm)
sum(seqlengths(dm))/1e6
dm_chrX <- getSeq(dm, "chrX")
nchar(dm_chrX)/1e6
alphabetFrequency(dm_chrX, baseOnly = T, as.prob = T)
seqs <- c("CCCGGG", "CCCCTTTT", "AAATTT", "TAGCT")
n = sapply(seqs, function(x) countPattern(x, dm_chrX ))
n
which.max(n)
?countPattern
data(HNF4alpha)
HNF4alpha
class(HNF4alpha)
pfm <- consensusMatrix(HNF4alpha)
round(pfm[1:4,]/colSums(pfm[1:4,]), 2)
class(pfm)
pwm <- PWM(pfm)
# or directly
pwm <- PWM(HNF4alpha, type = "prob")
round(pwm[1:4,]/colSums(pwm[1:4,]), 2)
maxWeights(pwm)
conMat <- consensusMatrix(HNF4alpha, as.prob = T)[1:4,]
seqLogo(conMat)
seqLogo(pwm[1:4,]/colSums(pwm[1:4,]))
TF_hits <- matchPWM(pwm, dm_chrX, with.score = TRUE)
length(TF_hits)
head(mcols(TF_hits)$score)
hist(mcols(TF_hits)$score)
TF_hits_rc <- matchPWM(reverseComplement(pwm), dm_chrX, with.score = TRUE)
length(TF_hits_rc)
hist(mcols(TF_hits_rc)$score)
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
BiocManager::install("RMariaDB")
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
up10000seqs <- extractUpstreamSeqs(dm, dm_txdb, width=10000)
up10000seqs <- extractUpstreamSeqs(dm, dm_txdb, width=10000)
upstream_hits <- vcountPattern("NGNNCAAAGNNCA", up10000seqs)
length(upstream_hits)
fly_seq <- c(A = "ACTGGCCA", B = "ACTGGCCT", C = "ACTGTCCA" )
print(fly_seq)
writeLines(fly_seq)
fly_seq <- c(A = "ACTGGCCA", B = "ACTGGCCT", C = "ACTGTCCA" )
print(fly_seq)
writeLines(fly_seq)
writeLines(fly_seq, sep ="\n")
cat(fly_seq, sep ="\n")
print(fly_seq)
writeLines(fly_seq)
writeLines(fly_seq, sep ="\n")
cat(fly_seq, sep ="\n")
?print
?writeLines
writeLines(fly_seq, sep = NULL)
writeLines(fly_seq, sep = F)
writeLines(fly_seq, sep = " ")
writeLines(fly_seq, sep = " ")
writeLines(fly_seq, sep = " ")
writeLines(fly_seq, sep ="\n")
cat(fly_seq, sep ="\n")
cat(fly_seq)
print(fly_seq)
paste("x", 1:5, sep="", collapse = " + ")
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(100, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
seqs
?sample
length(seqs)
nchar(seqs)
str_length(seqs)
stri_length(seqs)
length(seqs)
file_labels <- c("ID_GeneKnockdown2018_ds-RNAi_M_1_1",
"ID_GeneKnockdown2018_ds-RNAi_F_1_1",
"ID_GeneKnockdown2018_control_M_1_1",
"ID_GeneKnockdown2018_control_F_1_1")
str_split(file_labels, pattern = "_")
```{r}
str_split(file_labels, pattern = "_", simplify = T)
covariates_mat <- str_split(file_labels, pattern = "_", simplify = T)
colnames(covariates_mat) <- c("lab_peep", "experiment", "treatment", "sex", "vial", "individual")
covariates_mat
library(devtools)
library(gutenbergr)
library(tidyverse)
books <- gutenberg_works(grepl(title,
pattern = "On the origin of species",
ignore.case = TRUE))
books
books[["title"]]
books %>% select(title)
library(dplyr)
books %>% select(title)
books$title[1]
species <- gutenberg_download(1228)
str(species)
head(species$text)
species_text <- species$text
library(stringi)
q()
library(stringi)
?stri_isempty
library(stringr)
library(stringi)
library(tidytext)
library(gutenbergr)
library(tidyverse)
books <- gutenberg_works(grepl(title,
pattern = "On the origin of species",
ignore.case = TRUE))
books <- gutenberg_works(str_detect(title,
regex("on the origin of species",
ignore_case = TRUE)))
books
species <- gutenberg_download(1228)
str(species)
head(species$text)
species_text <- species$text
stri_isempty(species_text)
sum(stri_isempty(species_text))
length(species_text)
empty <- sum(stri_isempty(species_text))/length(species_text)
empty
length(grep("INTRODUCTION\\.",species_text, ignore.case = F)) # provides the positions in the text
grep("INTRODUCTION\\.",species_text, ignore.case = F)
sum(str_detect(species_text, "INTRODUCTION\\.")) #boolean for each word
length(str_subset(species_text, "INTRODUCTION\\.")) # equivalent to the grep statement
str_detect(species_text, "INTRODUCTION\\.")
species_text[c(49, 68, 281)]  # each word position in the text with INTRODUCTION.
species_slice <- species %>%
slice(grep("^INTRODUCTION\\.", text)[2]:(grep("^INDEX\\.", text)) - 1)
species_slice
?grep
grep("^CHAPTER", species_slice$text, value=TRUE)
grep("^CHAPTER", species_slice$text, value=FALSe)
grep("^CHAPTER", species_slice$text, value=FALSE)
length(grep("^CHAPTER", species_slice$text, value=TRUE))
nzchar(species_slice$text)
sum(nzchar(species_slice$text))
length(species_slice$text)
?nzchar
species_filtered <- species %>%
slice(grep("^INTRODUCTION\\.", text):(grep("^INDEX\\.", text))-1) %>%
filter(nzchar(text)) %>%
mutate(linenumber = row_number(),
chapter = cumsum(grepl("^[0-9]+\\.", text)))
head(species_filtered )
sum(nzchar(species_slice$text))
species_filtered$text <- toupper(species_filtered$text)
head(species_filtered$text)
head(species_filtered )
species_tidy <- species_filtered %>%
unnest_tokens(word, text)
head(species_tidy)
species_tidy <- species_tidy %>%
anti_join(stop_words)
head(species_tidy)
word_counts_10 <- species_tidy %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
mutate(word = reorder(word, n))
word_counts_10
library(wordcloud)
species_tidy %>%
count(word, sort = TRUE) %>%
top_n(25) %>%
mutate(word = reorder(word, n)) %>%
with(wordcloud(word, n, random.order = F, max.words  = 25, colors = rainbow(8)))
word_counts_25 <- species_tidy %>%
count(word, sort = TRUE) %>%
top_n(25) %>%
mutate(word = reorder(word, n))
word_counts_25 <- data.frame(word_counts_25)
with(word_counts_25,
wordcloud(word, n, random.order = F, max.words = 25, col = rainbow(n = 5)))
#library(BiocInstaller) # old deprecated
library(BiocManager) # new way
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library('BSgenome')
library(seqLogo)
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
head(sort(seqlengths(Dm6), decreasing  = TRUE))
seqinfo(Dm6)
sum(seqlengths(Dm6)[1:8])
sum(seqlengths(Dm6)[1:8])/1e6  # Mbp
alphabetFrequency(Dm6$chr2R)
alphabetFrequency(Dm6$chr2R,
baseOnly = T, as.prob = T)
dm_chrX <- getSeq(Dm6, names = "chrX")
dm_chrX
show(dm_chrX)
print(dm_chrX)
class(dm_chrX) # This is now a DNAString type object, not a BSgenome object
typeof(dm_chrX)
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
nchar(dm_chrX)/1e6
alphabetFrequency(dm_chrX, baseOnly = T, as.prob = T)
dm_chr3L <- getSeq(Dm6, names = "chr3L",
start = 1000000,
end = 2000000,
strand = "-")
alphabetFrequency(dm_chr3L, baseOnly = T, as.prob = T)
seqs2 <- c("CCCNGG", "CCCNTTTT", "AAANTT", "TAGNT")
n = sapply(seqs2, function(x) countPattern(x, dm_chrX, fixed = FALSE ))
n
which.max(n)
data(HNF4alpha)
HNF4alpha
class(HNF4alpha)
pfm <- consensusMatrix(HNF4alpha)
pfm
round(pfm[1:4,]/colSums(pfm[1:4,]), 2)
class(pfm)
pwm <- PWM(HNF4alpha, type = "prob")
round(pwm[1:4,]/colSums(pwm[1:4,]), 2)
maxWeights(pwm)
conMat <- consensusMatrix(HNF4alpha, as.prob = T)[1:4,]
seqLogo(conMat)
seqLogo(pwm[1:4,]/colSums(pwm[1:4,]))
pwm
?matchPWM
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
dm_txdb
head(transcripts(dm_txdb))  # let's look at the transcripts we have
head(up10000seqs)
up10000seqs <- extractUpstreamSeqs(Dm6, dm_txdb, width=10000)
head(up10000seqs)
?vcountPatter
?vcountPattern
upstream_hits <- vcountPattern("NGNNCAAAGNNCA", up10000seqs, fixed = FALSE)
length(upstream_hits)
upstream_hits
?maskMotif
TF_hits_blah <- matchPWM(pwm, up10000seqs, with.score = TRUE)
matchPWM()
?matchPWM
q()
