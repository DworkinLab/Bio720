seq1 <- cat(seq1_no_bias, sep = "")
seq1
seq1 <- paste0(seq1_no_bias, sep = "")
seq1
?paste
seq1 <- paste(seq1_no_bias, sep = "", collapse = "")
seq1
?sample
seq2_60GCbias <- paste(sample(c("A","C","G", "T"),
size = 1000, prob = c(20,30,30,20),
replace = TRUE),
sep = "", collapse = "")
seq2_60GCbias
?grep
seq2_60GCbias <- paste(sample(c("A","C","G", "T"),
size = 1000, prob = c(20,30,30,20),
replace = TRUE),
sep = "", collapse = "")
seq2_60GCbias
?grep
grep("GGCCA",seq2_60GCbias )
grep("GGCC",seq2_60GCbias )
grep("GGC",seq2_60GCbias )
grep("GG",seq2_60GCbias )
grep("G",seq2_60GCbias )
?jitter
knitr::opts_chunk$set(echo = TRUE)
options(digits = 3)
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
dll_data <- na.omit(dll_data)
dll_data_subset <- dll_data[sample(nrow(dll_data), 300, replace = F),]
dll_data_subset$temp <- factor(dll_data_subset$temp)
plot(jitter(SCT, factor = 1.5) ~ tibia,
pch = c(16,17)[dll_data_subset$temp], # symbol
cex = 0.95, # size of symbol
col = c("blue", "red")[dll_data_subset$genotype], # symbol colour
xlim = c(0.4, 0.57),
ylim = c(8, 18),
xlab = " tibia length",
ylab = "Number of Sex Comb Teeth",
main = "leg lengths measures",
data = dll_data_subset)
plot(jitter(SCT, factor = 1) ~ tibia,
pch = c(16,17)[dll_data_subset$temp], # symbol
cex = 0.95, # size of symbol
col = c("blue", "red")[dll_data_subset$genotype], # symbol colour
xlim = c(0.4, 0.57),
ylim = c(8, 18),
xlab = " tibia length",
ylab = "Number of Sex Comb Teeth",
main = "leg lengths measures",
data = dll_data_subset)
?regmatches
?charmatch
charmatch("GGCCA", seq2_60GCbias)
grep("GGCCAA",seq2_60GCbias )
grep("GGCCA",seq2_60GCbias )
q()
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
set.seed(720)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
set.seed(720)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
set.seed(720)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
set.seed(720)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
rm(x)
?sample
sample(1:6, size = 1, replace = TRUE)
sample(1:6, size = 1, replace = TRUE)
sample(1:6, size = 1, replace = TRUE)
sample(1:6, size = 1, replace = TRUE)
?replicate
replicate(100, sample(1:6, size = 1, replace = TRUE))
rolls <- replicate(100, sample(1:6, size = 1, replace = TRUE))
plot(rolls)
barplot(rolls)
barplot(table(rolls))
hist(rolls)
barplot(table(rolls))
rolls <- replicate(100, sample(1:6, size = 1, replace = TRUE))
barplot(table(rolls))
rolls <- replicate(100, sample(1:6, size = 1, replace = TRUE))
barplot(table(rolls))
more_rolls <- sample(1:6, size = 100, replace = TRUE)
barplot(table(more_rolls))
more_rolls <- sample(1:6, size = 100, replace = TRUE)
barplot(table(more_rolls))
more_rolls <- sample(1:6, size = 100, replace = TRUE)
barplot(table(more_rolls))
rolls <- replicate(10000, sample(1:6, size = 1, replace = TRUE))
barplot(table(rolls))
rolls <- replicate(1000, sample(1:6, size = 1, replace = TRUE))
barplot(table(rolls))
more_rolls <- sample(1:6, size = 1000, replace = TRUE)
barplot(table(more_rolls))
more_rolls2 <- sample(1:6, size = 1000, replace = FALSE)
sample(1:6, size = 1000, replace = FALSE)
sample(1:6, size = 6, replace = FALSE)
sample(1:6, size = 6, replace = FALSE)
sample(1:6, size = 6, replace = FALSE)
sample(1:6, size = 6, replace = FALSE)
sample(1:6, size = 6, replace = FALSE)
names(dll_data)
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
dll_data <- na.omit(dll_data)
names(dll_data)
allele_counts <- sample(c("A", "a"),
size = 40,
replace = TRUE,
probs = NULL)
table(allele_counts)/sum(allele_counts)
allele_counts <- sample(c("A", "a"),
size = 40,
replace = TRUE,
prob = NULL)
table(allele_counts)/sum(allele_counts)
?sample
allele_counts
table(allele_counts)
table(allele_counts)/length(allele_counts)
seq2_60GCbias <- paste(sample(c("A","C","G", "T"),
size = 100000, prob = c(30,20,20,30),
replace = TRUE),
sep = "", collapse = "")
nchar(seq2_60GCbias)
y <- gregexpr("AACTTTT", seq2_60GCbias, fixed = T, useBytes = T)
unlist(y)
table(seq2_60GCbias)
seq2_60GCbias <- sample(c("A","C","G", "T"),
size = 100000,
prob = c(30,20,20,30),
replace = TRUE)
nchar(seq2_60GCbias)
table(seq2_60GCbias )
table(seq2_60GCbias)/length(seq2_60GCbias)
seq2_60GCbias <- paste0(seq2_60GCbias, collapse="")
nchar(seq2_60GCbias)
y <- gregexpr("AACTTTT", seq2_60GCbias, fixed = T, useBytes = T)
y
unlist(y)
allele_counts <- sample(c("A", "a"),
size = 40,
replace = TRUE,
prob = c(0.5, 0.5))
allele_freq1 <- table(allele_counts)/length(allele_counts)
allele_freq1
allele_counts2 <- sample(c("A", "a"),
size = 40,
replace = TRUE,
prob = allele_freq1)
allele_counts2
allele_freq2 <- table(allele_counts2)/length(allele_counts2 )
allele_freq2
allele_freq1
allele_counts <- sample(c("A", "a"),
size = 40,
replace = TRUE,
prob = c(0.5, 0.5))
allele_freq1 <- table(allele_counts)/length(allele_counts)
allele_freq1
allele_counts2 <- sample(c("A", "a"),
size = 40,
replace = TRUE,
prob = allele_freq1)
allele_freq2 <- table(allele_counts2)/length(allele_counts2)
allele_freq2
allele_freq1
allele_counts <- sample(c("a", "A"),
size = 40,
replace = TRUE,
prob = c(0.5, 0.5))
allele_freq1 <- table(allele_counts)/length(allele_counts)
allele_freq1
allele_counts2 <- sample(c("A", "a"),
size = 40,
replace = TRUE,
prob = allele_freq1)
allele_freq2 <- table(allele_counts2)/length(allele_counts2)
allele_freq2
allele_counts <- sample(c("a", "A"),
size = 40,
replace = TRUE,
prob = c(0.5, 0.5))
allele_freq1 <- table(allele_counts)/length(allele_counts)
allele_freq1
allele_counts2 <- sample(c("A", "a"),
size = 40,
replace = TRUE,
prob = allele_freq1)
allele_freq2 <- table(allele_counts2)/length(allele_counts2)
allele_freq2
allele_counts <- sample(c("a", "A"),
size = 40,
replace = TRUE,
prob = c(0.5, 0.5))
allele_freq1 <- table(allele_counts)/length(allele_counts)
allele_freq1
allele_counts2 <- sample(c("a", "A"),
size = 40,
replace = TRUE,
prob = allele_freq1)
allele_freq2 <- table(allele_counts2)/length(allele_counts2)
allele_freq2
# N is the number of individuals in the population (which for the moment remains constant across generations).
# gen is how many generations we want to track things for
# freq is the initial allele frequency for A1 prior to gamete fusion
GeneticDriftRandomSampling <- function( N = 100, gen = 300, freq = 0.5) {
Alleles_initial <- c(rep("A1", (2*N*freq)),
rep("A2", (2*N*(1-freq))))
alleles_sampled <- sample(Alleles_initial, 2*N, replace = T)
p <- (table(alleles_sampled)/(2*N))
if (length(p) == 1) {p <- 0} else
p <- p[1]
return(p)
}
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
GeneticDriftRandomSampling(N = 100, gen = 300, freq = 0.1)
ru1 <- runif(n = 10000, min = 0, max = 1)
length(ru1)
head(ru1)
tail(ru1)
par(mfrow = c(1,1))
hist(ru1, freq = F)
curve(dunif(x, 0, 1), 0, 1,
add = T, col = "red", lwd = 2)
random.normal.100 <- rnorm(n = 100, mean = 5,sd = 2)
par(mfrow=c(3,1))
plot(random.normal.100)
boxplot(random.normal.100)
hist(random.normal.100)
?qqplot
qqplot(random.normal.100)
random.normal.100 <- rnorm(n = 100, mean = 5,sd = 2)
par(mfrow=c(3,1))
plot(random.normal.100)
boxplot(random.normal.100)
hist(random.normal.100)
qqplot(y = random.normal.100)
qqplot(x = random.normal.100)
qqnorm(y = random.normal.100)
abline(a = 0, b = 1, col = "red")
qqnorm(y = random.normal.100)
random.normal.100 <- rnorm(n = 100, mean = 5,sd = 2)
par(mfrow=c(3,1))
plot(random.normal.100)
boxplot(random.normal.100)
hist(random.normal.100)
qqnorm(y = random.normal.100)
random.normal.100 <- rnorm(n = 100, mean = 5,sd = 2)
par(mfrow=c(2,2))
plot(random.normal.100)
boxplot(random.normal.100)
hist(random.normal.100)
qqnorm(y = random.normal.100)
random.normal.100 <- rnorm(n = 100, mean = 5,sd = 2)
par(mfrow=c(2,2))
plot(random.normal.100)
boxplot(random.normal.100)
hist(random.normal.100)
qqnorm(y = random.normal.100)
random.normal.100 <- rnorm(n = 100, mean = 5,sd = 2)
par(mfrow=c(2,2))
plot(random.normal.100)
hist(random.normal.100)
qqnorm(y = random.normal.100)
random.normal.100 <- rnorm(n = 100, mean = 5,sd = 2)
par(mfrow=c(2,2))
plot(random.normal.100)
hist(random.normal.100)
qqnorm(y = random.normal.100)
random.normal.100.rep <- replicate(n = 10,
rnorm(100, 5, 2))
par(mfrow=c(4,4))
apply(X=random.normal.100.rep,
MARGIN=2, FUN=hist)
apply(X=random.normal.100.rep, MARGIN=2, FUN=mean)
apply(random.normal.100.rep, 2, sd)
summary(random.normal.100.rep)
par(mfrow=c(1,1))
a = 5 # intercept
b = 0.7 # slope
x <- seq(2,20) # values of our predictor "x"
y_fixed <- a + b*x # we are expressing the relationship between y and x as a linear model. In this case we are generating the data using such a model.
plot(y_fixed ~ x, main= "Deterministic Component of the model") # A linear model
abline(a=5, b=0.7)
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
plot(y_fixed ~ x, col = "black", type = "n")
abline(a=5, b=0.7)
simulated_regression <- function() {
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2.5)
y.sim.1.lm <- lm(y.sim.1 ~ x)
abline(reg = y.sim.1.lm, lty = 2, col = "#FF000032")}
replicate(n =25, simulated_regression)
simulated_regression <- function() {
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2.5)
y.sim.1.lm <- lm(y.sim.1 ~ x)
abline(reg = y.sim.1.lm, lty = 2, col = "#FF000032")}
replicate(n =25, simulated_regression())
as.hexmode(50)
as.hexmode(80)
plot(y_fixed ~ x, col = "black", type = "n")
abline(a=5, b=0.7)
simulated_regression <- function() {
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2.5)
y.sim.1.lm <- lm(y.sim.1 ~ x)
abline(reg = y.sim.1.lm, col = "#FF000050")}
replicate(n =25, simulated_regression())
for (i in 1:25){
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2.5)
y.sim.1.lm <- lm(y.sim.1 ~ x)
abline(reg = y.sim.1.lm, col = "#0000FF50")
}
simulated_regression <- function() {
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2.5)
y.sim.1.lm <- lm(y.sim.1 ~ x)
abline(reg = y.sim.1.lm, col = "#FF000032")}
replicate(n =25, simulated_regression())
seq1_no_bias <- sample(c("A","C","G", "T"),
size = 100000, replace = TRUE)
table(seq1_no_bias)/length(seq1_no_bias)
length(seq1_no_bias)
head(seq1_no_bias)
seq1 <- paste(seq1_no_bias, sep = "", collapse = "")
nchar(seq1)
x <- gregexpr("AACTTTT", seq1, fixed = T, useBytes = T)
unlist(x)
x <- gregexpr("AACTTTT", seq1, fixed = T, useBytes = T)
length(unlist(x))
?gregexpr
?regex
?gregexpr
seq1_no_bias <- sample(c("A","C","G", "T"),
size = 100000, replace = TRUE)
table(seq1_no_bias)/length(seq1_no_bias)
length(seq1_no_bias)
head(seq1_no_bias)
seq1 <- paste(seq1_no_bias, sep = "", collapse = "")
nchar(seq1)
x <- gregexpr("AACTTTT", seq1, fixed = T, useBytes = T)
length(unlist(x))
seq2_60GCbias <- sample(c("A","C","G", "T"),
size = 100000,
prob = c(30,20,20,30),
replace = TRUE)
table(seq2_60GCbias)/length(seq2_60GCbias)
seq2_60GCbias <- paste0(seq2_60GCbias, collapse="")
nchar(seq2_60GCbias)
y <- gregexpr("AACTTTT", seq2_60GCbias, fixed = T, useBytes = T)
unlist(y)
y
?trans
?translate
?tr
?chartr
seq2 <- "AAACTGA"
chartr(c("A", "C", "T", "G"), c("T", "G", "A", "C"), seq2)
seq2 <- "AAACTGA"
chartr("ACTG", "TGAC", seq2)
?rev
rev(seq2)
?chartr
seq3_60GCbias <- sample(c("A","C","G", "T"),
size = 20,
prob = c(30,20,20,30),
replace = TRUE)
seq3_60GCbias
seq3_60GCbias_rev <- rev(seq3_60GCbias)
seq3_60GCbias_rev
?trimws
trimws
?sub
set.seed(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
set.seed(1)
set.seed(1)
rnorm(1)
rnorm(1)
rnorm(1)
set.seed()
?set.seed
set.seed[ok[1]]
ok <- RNGkind()
ok
set.seed(ok[1])
set.seed(NULL)
set.seed(1)
rnorm(1)
rnorm(1)
rnorm(1)
set.seed(1)
rnorm(1)
set.seed(NULL)
rnorm(1)
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
str(sll_sT)
str(dll_data)
dll_data$genotype <- relevel(dll_data$genotype, "wt")
contrasts(dll_data$genotype)
contrasts(dll_data$genotype)
?contrasts
contr.treatment(dll_data$genotype)
contr.treatment(contrasts(dll_data$genotype))
contr.treatment(levels(dll_data$genotype))
levels(dll_data$genotype)
contr.SAS(levels(dll_data$genotype))
contr.helmert(levels(dll_data$genotype))
contr.sum(levels(dll_data$genotype))
contr.sum(contrasts(dll_data$genotype))
contr.sum(levels(dll_data$genotype))
contr.poly(levels(dll_data$genotype))
contr.treatment(2)
contr.treatment(3)
ccontr.sum(3)
contr.sum(3)
contr.helmert(3)
contr.helmert(4)
contr.treatment(4)
contr.sum(4)
contr.poly(4)
