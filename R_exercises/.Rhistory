lty = 2, # stippling of line
col = "grey")
abline(h = mean(dll_data_subset$SCT),
lwd = 3, lty = 2, col = "grey" )
mod1 <- lm(SCT ~ tarsus,
data = dll_data_subset)
plot(SCT ~ tarsus,
pch = c(16,17)[dll_data_subset$temp], # symbol
cex = 0.75, # size of symbol
col = c("blue", "red")[dll_data_subset$genotype], # symbol colour
xlab = " tarsus length",
ylab = "Number of Sex Comb Teeth",
main = "SCT VS tarsus",
data = dll_data_subset)
# and then plot based on the model fit.
abline(mod1, lwd = 2, lty = 2)
plot(SCT ~ tarsus,
pch = c(16,17)[dll_data_subset$temp],
cex = 0.75,
col = dll_data_subset$genotype,
xlab = " tarsus length",
ylab = "Number of Sex Comb Teeth",
main = "SCT VS tarsus",
data = dll_data_subset)
lapply(dll_data_subset$genotype,
function(x) {
abline(lm(SCT ~ tarsus, dll_data_subset, subset = (genotype == x)), col = x)
})
plot(SCT ~ tarsus,
pch = c(16,17)[dll_data_subset$temp],
cex = 0.75,
col = dll_data_subset$genotype,
xlab = " tarsus length",
ylab = "Number of Sex Comb Teeth",
main = "SCT VS tarsus",
data = dll_data_subset)
abline(lm(SCT ~ tarsus, data = dll_data_subset), lty = 2, col = "grey")
lapply(dll_data_subset$genotype,
function(x) {
abline(lm(SCT ~ tarsus, dll_data_subset, subset = (genotype == x)), col = x)
})
plot(SCT ~ tarsus,
pch = c(16,17)[dll_data_subset$temp],
cex = 0.75,
col = dll_data_subset$genotype,
xlab = " tarsus length",
ylab = "Number of Sex Comb Teeth",
main = "SCT VS tarsus",
data = dll_data_subset)
abline(lm(SCT ~ tarsus, data = dll_data_subset), lty = 2, lwd =2, col = "grey")
lapply(dll_data_subset$genotype,
function(x) {
abline(lm(SCT ~ tarsus, dll_data_subset, subset = (genotype == x)), col = x)
})
plot(SCT ~ tarsus,
pch = c(16,17)[dll_data$temp],
cex = 0.75,
col = dll_data$genotype,
xlab = " tarsus length",
ylab = "Number of Sex Comb Teeth",
main = "SCT VS tarsus",
data = dll_data)
abline(lm(SCT ~ tarsus, data = dll_data), lty = 2, lwd =2, col = "grey")
lapply(dll_data$genotype,
function(x) {
abline(lm(SCT ~ tarsus, dll_data, subset = (genotype == x)), col = x)
})
plot(SCT ~ tarsus,
pch = c(16,17)[dll_data$temp],
cex = 0.75,
col = dll_data$genotype,
xlab = " tarsus length",
ylab = "Number of Sex Comb Teeth",
main = "SCT VS tarsus",
data = dll_data)
abline(lm(SCT ~ tarsus, data = dll_data), lty = 2, lwd =2, col = "grey")
sapply(dll_data$genotype,
function(x) {
abline(lm(SCT ~ tarsus, dll_data, subset = (genotype == x)), col = x)
})
plot(SCT ~ tarsus,
pch = c(16,17)[dll_data_subset$temp],
cex = 0.75,
col = dll_data_subset$genotype,
xlab = " tarsus length",
ylab = "Number of Sex Comb Teeth",
main = "SCT VS tarsus",
data = dll_data_subset)
abline(lm(SCT ~ tarsus, data = dll_data_subset), lty = 2, lwd =2, col = "grey")
lapply(dll_data_subset$genotype,
function(x) {
abline(lm(SCT ~ tarsus, dll_data_subset, subset = (genotype == x)), col = x)
})
?lengths
basefreq <- sapply(reads, BaseFrequencies, USE.NAMES = T)
x <- 1:50
y <- rnorm(length(x), 2 + 0.8*x, sd= 5 + 0.1*x)
model_1 <- lm(y ~ x)
new <- data.frame(x = seq(min(x), max(x), 1))
pred <- predict(model_1, newdata = new, interval = "confidence")
plot(y ~ x, pch = 20, cex = 1.5)
lines(x = new[,1], y = pred[,1], lwd = 3) # this would be the same as abline(model.1)
lines(x = new[,1], y = pred[,3], lwd = 3, lty = 2)
lines(x = new[,1], y = pred[,2], lwd = 3, lty = 2)
plot(y ~ x, pch = 20, cex = 1.5)
matlines(x = new[,1], y = pred[,1:3], lwd=c(3,3,3), lty=c(1,2,2), col = 1)
plot(y ~ x, pch= 20, type = "n")
polygon(x = c(1:nrow(new), nrow(new):1),
y = c(pred[,2], rev(pred[,3])),
col="grey", border = "grey")
lines(x = new[,1], y = pred[,1], lwd = 3)
# And the data
points(y ~ x, pch = 20, cex = 1.5)
plot(y ~ x, type = "n",
xlab = "predictor", ylab = "response", main = "Nice looking plot",
cex.lab = 1.7, cex.axis = 1.5, cex.main = 2.1,
family = "serif", pch = 20)
polygon(x = c(1:nrow(new), nrow(new):1),
y = c(pred[,2], rev(pred[,3])),
col= "#fe000032", border = "#fe000032")
points(y ~ x, pch = 20, cex = 2)
quartz()
plot(y ~ x, type = "n",
xlab = "predictor", ylab = "response", main = "Nice looking plot",
cex.lab = 1.7, cex.axis = 1.5, cex.main = 2.1,
family = "serif", pch = 20)
polygon(x = c(1:nrow(new), nrow(new):1),
y = c(pred[,2], rev(pred[,3])),
col= "#fe000032", border = "#fe000032")
points(y ~ x, pch = 20, cex = 2)
x <- 1:50
y <- rnorm(length(x), 2 + 0.8*x, sd= 5 + 0.1*x)
model_1 <- lm(y ~ x)
x <- 1:50
y <- rnorm(length(x), 2 + 0.8*x, sd= 5 + 0.1*x)
model_1 <- lm(y ~ x)
new <- data.frame(x = seq(min(x), max(x), 1))
pred <- predict(model_1, newdata = new, interval = "confidence")
plot(y ~ x, type = "n",
xlab = "predictor", ylab = "response", main = "Nice looking plot",
cex.lab = 1.7, cex.axis = 1.5, cex.main = 2.1,
family = "serif", pch = 20)
polygon(x = c(1:nrow(new), nrow(new):1),
y = c(pred[,2], rev(pred[,3])),
col= "#fe000032", border = "#fe000032")
points(y ~ x, pch = 20, cex = 2)
quartz()
plot(y ~ x, type = "n",
xlab = "predictor", ylab = "response", main = "Nice looking plot",
cex.lab = 1.7, cex.axis = 1.5, cex.main = 2.1,
family = "serif", pch = 20)
polygon(x = c(1:nrow(new), nrow(new):1),
y = c(pred[,2], rev(pred[,3])),
col= "#fe000032", border = "#fe000032")
points(y ~ x, pch = 20, cex = 2)
x <- 1:50
y <- rnorm(n = length(x), mean = 2 + (0.8*x), sd= 3)
model_1 <- lm(y ~ x)
rnorm()
model_1
x <- 1:50
y <- rnorm(n = length(x), mean = 2 + (0.8*x), sd= 3)
model_1 <- lm(y ~ x)
model_1
x <- 1:50
y <- rnorm(n = length(x), mean = (2 + (0.8*x)), sd= 3)
model_1 <- lm(y ~ x)
model_1
x <- 1:50
y <- rnorm(n = length(x), mean = (2 + (0.8*x)), sd= 0.1)
model_1 <- lm(y ~ x)
model_1
x <- 1:50
y <- rnorm(n = length(x), mean = (2 + (0.8*x)), sd= 2)
model_1 <- lm(y ~ x)
new <- data.frame(x = seq(min(x), max(x), 1))
pred <- predict(model_1, newdata = new, interval = "confidence")
quartz()
plot(y ~ x, type = "n",
xlab = "predictor", ylab = "response", main = "Nice looking plot",
cex.lab = 1.7, cex.axis = 1.5, cex.main = 2.1,
family = "serif", pch = 20)
polygon(x = c(1:nrow(new), nrow(new):1),
y = c(pred[,2], rev(pred[,3])),
col= "#fe000032", border = "#fe000032")
points(y ~ x, pch = 20, cex = 2)
x <- 1:50
y <- rnorm(n = length(x), mean = (2 + (0.8*x)), sd= 4)
model_1 <- lm(y ~ x)
new <- data.frame(x = seq(min(x), max(x), 1))
pred <- predict(model_1, newdata = new, interval = "confidence")
quartz()
plot(y ~ x, type = "n",
xlab = "predictor", ylab = "response", main = "Nice looking plot",
cex.lab = 1.7, cex.axis = 1.5, cex.main = 2.1,
family = "serif", pch = 20)
polygon(x = c(1:nrow(new), nrow(new):1),
y = c(pred[,2], rev(pred[,3])),
col= "#fe000032", border = "#fe000032")
points(y ~ x, pch = 20, cex = 2)
old_par <- par()
par <- old_par
dll.data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
dll.data <- na.omit(dll.data)
model.dll.25 <- lm(SCT ~ tarsus, data=dll.data, subset=genotype=="Dll" & temp==25)
model.wt.25 <- lm(SCT ~ tarsus, data=dll.data, subset=genotype=="wt" & temp==25)
new.Dll <- with(dll.data[dll.data$genotype =="Dll" & dll.data$temp==25,],
data.frame(tarsus = seq(range(tarsus)[1], range(tarsus)[2], by=0.005) ))
pred.Dll <-predict(model.dll.25, new.Dll, interval="confidence")
new.wt <- with(dll.data[dll.data$genotype =="wt" & dll.data$temp==25,],
data.frame(tarsus = seq(range(tarsus)[1], range(tarsus)[2], by=0.005) ))
pred.wt <-predict(model.wt.25, new.wt, interval="confidence")
old_par <- par()
par(mar = c(5,5,4,1), family = "serif")
with(dll.data[dll.data$temp==25,],
plot(SCT ~ tarsus, col=c("red", "blue")[dll.data$genotype], type = "n",
ylab = " # of Sex Comb Teeth", xlab = "Tarsus Length (mm)",
main = expression(paste("Scaling relationships between SCT and tarsus length for ", italic(Drosophila), " genotypes" )),
cex.lab = 1.4, cex.axis = 1.5, cex.main = 1.5,
family = "serif", pch = 20))
# Confidence band for the wild-type flies
polygon(x = c(new.wt[,1], rev(new.wt[,1])), y = c(pred.wt[,2], rev(pred.wt[,3])),
col="#0000ff32", border = "#0000ff32")
# lines(x = new.wt[,1], y = pred.wt[,1], lwd = 2, lty = 2) # add back if you want line for slope
# confidence band for the mutant flies
polygon(x = c(new.Dll[,1], rev(new.Dll[,1])), y = c(pred.dll[,2], rev(pred.dll[,3])),
col="#ff000032", border = "#ff000032")
# lines(x = new.Dll[,1], y = pred.dll[,1], lwd=2, lty = 2)
with(dll.data[dll.data$temp==25,],
points(jitter(SCT) ~ tarsus, pch = 20, cex = 1.5,
col=c("#ff000050", "#0000ff50")[dll.data$genotype] ))
legend(x = "topleft",
legend = c(expression(paste(italic("Distal-less")^11, "/+")), "wild-type"),
col= c("red", "blue"), pch = 16, cex = 1.5, bty = "n")
quartz()
old_par <- par()
par(mar = c(5,5,4,1), family = "serif")
with(dll.data[dll.data$temp==25,],
plot(SCT ~ tarsus, col=c("red", "blue")[dll.data$genotype], type = "n",
ylab = " # of Sex Comb Teeth", xlab = "Tarsus Length (mm)",
main = expression(paste("Scaling relationships between SCT and tarsus length for ", italic(Drosophila), " genotypes" )),
cex.lab = 1.4, cex.axis = 1.5, cex.main = 1.5,
family = "serif", pch = 20))
# Confidence band for the wild-type flies
polygon(x = c(new.wt[,1], rev(new.wt[,1])), y = c(pred.wt[,2], rev(pred.wt[,3])),
col="#0000ff32", border = "#0000ff32")
# lines(x = new.wt[,1], y = pred.wt[,1], lwd = 2, lty = 2) # add back if you want line for slope
# confidence band for the mutant flies
polygon(x = c(new.Dll[,1], rev(new.Dll[,1])), y = c(pred.dll[,2], rev(pred.dll[,3])),
col="#ff000032", border = "#ff000032")
# lines(x = new.Dll[,1], y = pred.dll[,1], lwd=2, lty = 2)
with(dll.data[dll.data$temp==25,],
points(jitter(SCT) ~ tarsus, pch = 20, cex = 1.5,
col=c("#ff000050", "#0000ff50")[dll.data$genotype] ))
legend(x = "topleft",
legend = c(expression(paste(italic("Distal-less")^11, "/+")), "wild-type"),
col= c("red", "blue"), pch = 16, cex = 1.5, bty = "n")
quartz()
old_par <- par()
par(mar = c(5,5,4,1), family = "serif")
with(dll.data[dll.data$temp==25,],
plot(SCT ~ tarsus, col=c("red", "blue")[dll.data$genotype], type = "n",
ylab = " # of Sex Comb Teeth", xlab = "Tarsus Length (mm)",
main = expression(paste("Scaling relationships between SCT and tarsus length for ", italic(Drosophila), " genotypes" )),
cex.lab = 1.4, cex.axis = 1.5, cex.main = 1.5,
family = "serif", pch = 20))
# Confidence band for the wild-type flies
polygon(x = c(new.wt[,1], rev(new.wt[,1])), y = c(pred.wt[,2], rev(pred.wt[,3])),
col="#0000ff32", border = "#0000ff32")
# lines(x = new.wt[,1], y = pred.wt[,1], lwd = 2, lty = 2) # add back if you want line for slope
# confidence band for the mutant flies
polygon(x = c(new.Dll[,1], rev(new.Dll[,1])), y = c(pred.dll[,2], rev(pred.dll[,3])),
col="#ff000032", border = "#ff000032")
# lines(x = new.Dll[,1], y = pred.dll[,1], lwd=2, lty = 2)
with(dll.data[dll.data$temp==25,],
points(jitter(SCT) ~ tarsus, pch = 20, cex = 1.5,
col=c("#ff000050", "#0000ff50")[dll.data$genotype] ))
legend(x = "topleft",
legend = c(expression(paste(italic("Distal-less")^11, "/+")), "wild-type"),
col= c("red", "blue"), pch = 16, cex = 1.5, bty = "n")
model.dll.25 <- lm(SCT ~ tarsus, data=dll.data, subset=genotype=="Dll" & temp==25)
model.wt.25 <- lm(SCT ~ tarsus, data=dll.data, subset=genotype=="wt" & temp==25)
new.Dll <- with(dll.data[dll.data$genotype =="Dll" & dll.data$temp==25,],
data.frame(tarsus = seq(range(tarsus)[1], range(tarsus)[2], by=0.005) ))
pred.Dll <-predict(model.dll.25, new.Dll, interval="confidence")
new.wt <- with(dll.data[dll.data$genotype =="wt" & dll.data$temp==25,],
data.frame(tarsus = seq(range(tarsus)[1], range(tarsus)[2], by=0.005) ))
pred.wt <-predict(model.wt.25, new.wt, interval="confidence")
old_par <- par()
par(mar = c(5,5,4,1), family = "serif")
with(dll.data[dll.data$temp==25,],
plot(SCT ~ tarsus, col=c("red", "blue")[dll.data$genotype], type = "n",
ylab = " # of Sex Comb Teeth", xlab = "Tarsus Length (mm)",
main = expression(paste("Scaling relationships between SCT and tarsus length for ", italic(Drosophila), " genotypes" )),
cex.lab = 1.4, cex.axis = 1.5, cex.main = 1.5,
family = "serif", pch = 20))
# Confidence band for the wild-type flies
polygon(x = c(new.wt[,1], rev(new.wt[,1])), y = c(pred.wt[,2], rev(pred.wt[,3])),
col="#0000ff32", border = "#0000ff32")
# lines(x = new.wt[,1], y = pred.wt[,1], lwd = 2, lty = 2) # add back if you want line for slope
# confidence band for the mutant flies
polygon(x = c(new.Dll[,1], rev(new.Dll[,1])), y = c(pred.Dll[,2], rev(pred.Dll[,3])),
col="#ff000032", border = "#ff000032")
# lines(x = new.Dll[,1], y = pred.Dll[,1], lwd=2, lty = 2)
with(dll.data[dll.data$temp==25,],
points(jitter(SCT) ~ tarsus, pch = 20, cex = 1.5,
col=c("#ff000050", "#0000ff50")[dll.data$genotype] ))
legend(x = "topleft",
legend = c(expression(paste(italic("Distal-less")^11, "/+")), "wild-type"),
col= c("red", "blue"), pch = 16, cex = 1.5, bty = "n")
quartz()
old_par <- par()
par(mar = c(5,5,4,1), family = "serif")
with(dll.data[dll.data$temp==25,],
plot(SCT ~ tarsus, col=c("red", "blue")[dll.data$genotype], type = "n",
ylab = " # of Sex Comb Teeth", xlab = "Tarsus Length (mm)",
main = expression(paste("Scaling relationships between SCT and tarsus length for ", italic(Drosophila), " genotypes" )),
cex.lab = 1.4, cex.axis = 1.5, cex.main = 1.5,
family = "serif", pch = 20))
# Confidence band for the wild-type flies
polygon(x = c(new.wt[,1], rev(new.wt[,1])), y = c(pred.wt[,2], rev(pred.wt[,3])),
col="#0000ff32", border = "#0000ff32")
# lines(x = new.wt[,1], y = pred.wt[,1], lwd = 2, lty = 2) # add back if you want line for slope
# confidence band for the mutant flies
polygon(x = c(new.Dll[,1], rev(new.Dll[,1])), y = c(pred.Dll[,2], rev(pred.Dll[,3])),
col="#ff000032", border = "#ff000032")
# lines(x = new.Dll[,1], y = pred.Dll[,1], lwd=2, lty = 2)
with(dll.data[dll.data$temp==25,],
points(jitter(SCT) ~ tarsus, pch = 20, cex = 1.5,
col=c("#ff000050", "#0000ff50")[dll.data$genotype] ))
legend(x = "topleft",
legend = c(expression(paste(italic("Distal-less")^11, "/+")), "wild-type"),
col= c("red", "blue"), pch = 16, cex = 1.5, bty = "n")
?pdf
?predict
methods(predict)
as.numeric(list_the_data[1])
gene1 <- c(3, 4, 7, 9, 12, 6)
gene2 <- c(11, 17, 12, 25, 23, 7)
gene3 <- c(100, 103, 97, 94, 106, 111)
genotype <- c("wildtype", "wildtype", "wildtype", "mutant", "mutant", "mutant")
genotype
mode(genotype)
genotype2 <- rep(c("wildtype", "mutant"), each = 3)
genotype2
mode(genotype2)
class(genotype2)
genotype3 <- gl(n = 2, k = 3, labels = c("wildtype", "mutant"))
genotype3
mode(genotype3)
class(genotype3)
genotype2 == genotype3
identical(genotype2, genotype3)
all.equal(genotype2, genotype3)
genotype2_factor <- as.factor(genotype2)
class(genotype2_factor)
mode(genotype2_factor)
identical(genotype3, genotype2_factor)
genotype3 == genotype2_factor
?identical
genotype3_character <- as.character(genotype3)
genotype3_character
class(genotype3_character)
mode(genotype3_character)
identical(genotype3_character, genotype2)
genotype3_character == genotype2
str(genotype2)
day <- gl(n = 2, k = 1 , length = 6, labels = c(3, 6))
day
class(day)
mode(day)
typeof(day)
as.character(day)
as.numeric(day)
gene_mat1 <- cbind(gene1, gene2, gene3)
gene_mat1
gene_mat2 <- matrix(c(gene1, gene2, gene3), nrow =6, ncol =3, byrow =FALSE)
gene_mat1 == gene_mat2
identical(gene_mat1, gene_mat2)
str(gene_mat1)
str(gene_mat2)
typeof(gene_mat2)
typeof(gene_mat1)
mode(gene_mat1)
mode(gene_mat2)
gene_mat1
gene_mat2
genotype <- rep(c("wildtype", "mutant"), each = 3)
day <- rep(c("3", "6"), times = 3)
genotype
day
treatments <- cbind(genotype, day)
class(treatments)
mode(treatments)
all_the_data <- cbind(gene1, gene2, gene3, genotype, day)
class(all_the_data)
mode(all_the_data)
all_the_data
rm(all_the_data)
all_the_data <- data.frame(gene1, gene2, gene3, genotype, day)
str(all_the_data)
class(all_the_data)
mode(all_the_data)
all_the_data[c("gene2", "gene3", "genotype")]
all_the_data[ ,c(2:4)]
all_the_data[["gene2"]]
all_the_data$gene2
subset(all_the_data, select = c("gene2", "gene3", "genotype"))
subset(all_the_data,
select = c("gene2", "gene3", "genotype"))
all_the_data$gene4 <- c(10, 11, 7, 11, 2, 3)
all_the_data
str(all_the_data)
list_the_data = list(gene1, gene2, gene3, genotype, day)
list_the_data
str(list_the_data)
names(list_the_data)
list_the_data = list(gene1 = gene1, gene2 = gene2, gene3 = gene3, genotype = genotype, day = day)
list_the_data
str(list_the_data)
names(list_the_data)
list_the_data$random_variable = c(T,T,F)
list_the_data
str(list_the_data)
list_the_data$gene1
list_the_data[1]
list_the_data["gene1"]
list_the_data[[1]]
list_the_data[["gene1"]]
class(list_the_data$gene1)
class(list_the_data[1])
class(list_the_data["gene1"])
class(list_the_data[[1]])
class(list_the_data[["gene1"]])
str(list_the_data$gene1)
str(list_the_data[1])
str(list_the_data["gene1"])
str(list_the_data[[1]])
str(list_the_data[["gene1"]])
as.numeric(list_the_data[1])
str(as.numeric(unlist(list_the_data[1])))
as.numeric(list_the_data[1])
summary(cars)
z = 3:5
typeof(z)
# because of how division is computed in R, it converts to double
typeof(z/z)
#  though, addition, substraction and multiplication do not require this, so stay integer
typeof(z*z)
typeof(z)
typeof(z/z)
typeof(z*z)
typeof(z^2)
typeof(z+z)
typeof(z-z)
typeof(sqrt(z))
rm( x, y, z) # clean up
x = 1
y = "1"
z = "one"
a = TRUE
b = "TRUE"
x == y
all.equal(x, y)
identical(x, y)
y == z
all.equal(y, z)
identical(y, z)
# Which might be obvious by
mode(y)
mode(z)
y == z
all.equal(y, z)
identical(y, z)
# Which might be obvious by
mode(y)
mode(z)
a == b
all.equal(a, b)
identical(a, b)
# Which might be obvious
mode(a); typeof(a)
mode(b); typeof(b)
rm(x, y, z, a, b)
x = T
x
y = TRUE
y
x == y
identical(x, y)
logical(1)
logical(T)
?logical
logical(length = 1)
logical(length = 5)
?double
double_up <- double(10)
double_up
numeric(10)
identical(numeric(10), double(10))
integer_10 <- integer(10)
integer_10
integer_10 <- integer(10, NA)
integer_10 <- integer(10, rep(NA, 10))
gene1 <- c(3, 4, 7, 9, 12, 6)
gene2 <- c(11, 17, 12, 25, 23, 7)
gene3 <- c(100, 103, 97, 94, 106, 111)
rm(all_the_data)
all_the_data <- data.frame(gene1, gene2, gene3, genotype, day)
str(all_the_data)
class(all_the_data)
mode(all_the_data)
