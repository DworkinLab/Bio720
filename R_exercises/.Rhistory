anyNA(dll_data)
mean(dll_data$femur)
dll_data %>%
select(femur) %>%
summarize(femur_mean = mean(femur))
dll_data %>%
select(femur) %>%
summarize(femur_mean = mean(femur, na.rm = TRUE))
dll_data %>%
select(femur) %>%
count(is.na(femur))
summarise(dll_data, femur_avg = mean(femur))
summarise(dll_data, femur_avg = mean(femur, na.rm = TRUE))
dll_data %>%
select(femur) %>%
count(is.na(femur))
dll_data %>%
select(femur) %>%
summarize(femur_mean = mean(femur, na.rm = TRUE))
femur_mean
head(duplicated(dll_data))
tail(duplicated(dll_data))
sum(duplicated(dll_data))
any(duplicated(dll_data))
anyDuplicated(dll_data)
dll_data[anyDuplicated(dll_data),]
head(duplicated(dll_data_complete))
tail(duplicated(dll_data_complete))
sum(duplicated(dll_data))
sum(duplicated(dll_data_complete))
any(duplicated(dll_data_complete))
dll_data_complete[anyDuplicated(dll_data_complete),]
anyDuplicated(dll_data_complete)
new_rows <- ddll_data_complete[sample(nrow(dll_data_complete),
size = 5, replace = T ),]
dll_data2 <- rbind(dll_data_complete, new_rows)
str(dll_data2)
any(duplicated(dll_data2))
dll_data2[duplicated(dll_data2),]
summarize(dll_data2, duplicated)
summarize(dll_data2, anyDuplicated)
summarize(dll_data2, anyDuplicated(.))
rm(dll_data_unique, dll_data2)
str(dll_data_complete)
dll_data <- dll_data_complete
str(dll_data)
dll_data_wt <- dll_data[dll_data$genotype == "wt",]
dll_data_unique2 <- distinct(dll_data2)
new_rows <- ddll_data_complete[sample(nrow(dll_data_complete),
size = 5, replace = T ),]
dll_data2 <- rbind(dll_data_complete, new_rows)
str(dll_data2)
dll_data_unique2 <- distinct(dll_data2)
dll_data_unique2
dim(dll_data2)
dll_data_wt_ty <- dll_data %>%
filter(genotype == "wt")
str(dll_data_wt_ty)
dll_data_wt_ty %>%
count(genotype)
dll_data %>%
count(genotype)
with(dll_data,
table(genotype))
with(dll_data_wt,
table(genotype))
dll_data_wt_ty %>%
count()
dll_data_wt_ty %>%
count()
dll_data_wt_ty %>%
count(nrow)
count(dll_data_wt_ty)
nrow(dll_data_wt)
dll_data_wt_ty %>%
summarize(dim)
dll_data_wt_ty %>%
summarize(dim(.))
dll_data_Dll <- dll_data %>%
filter(genotype == "Dll") %>%
select (line, genotype, temp, SCT)
str(dll_data_Dll)
dll_data %>%
filter(genotype == "Dll") %>%
select(femur, tibia, SCT) %>%
summarise_each(mean, sd)
dll_data %>%
filter(genotype == "Dll") %>%
select(femur, tibia, SCT) %>%
summarise_across(mean, sd)
dll_data %>%
filter(genotype == "Dll") %>%
select(femur, tibia, SCT) %>%
across(mean, sd)
dll_data %>%
filter(genotype == "Dll") %>%
select(femur, tibia, SCT) %>%
across(mean)
?across
rm(dll_data_Dll, dll_data_wt, dll_data_new_subset, matched_set)
levels(dll_data$line)
table(dll_data$line)
line_names2 <- str_split(line_str, split = "-")
head(line_names2)
?str_split
line_names2 <- str_split(string = line_str,
pattern = "-",
simplify = TRUE)
line_names2 <- str_split(string = line_str,
pattern = "-",
simplify = TRUE)
line_names <- substr(line_str,
start = 6, stop= 1000000L )
line_names <- substr(dll_data$line,
start = 6, stop= 1000000L )
head(line_names)
tail(line_names)
line_names2 <- str_split(string = dll_data$line,
pattern = "-",
simplify = TRUE)
head(line_names2)
dll_data$line_names <- factor(line_names2[,2])
dll_data = read.csv("http://beaconcourse.pbworks.com/f/dll.csv",
h = T, stringsAsFactors = TRUE)
sessionInfo()
class(dll_data)
summary(dll_data)
str(dll_data)
dim(dll_data)
head(dll_data)
?is.na
is.na(dll_data)
sum(is.na(dll_data))
anyNA(dll_data)
mean(dll_data$femur, na.rm = TRUE)
duplicated(dll_data)
sum(duplicated(dll_data))
anyDuplicated(dll_data)
dll_data[891,]
dim(dll_data)
dll_data[anyDuplicated(dll_data),]
dll_data <- na.omit(dll_data)
mean(dll_data$femur)
anyDuplicated(dll_data)
new_rows <- dll_data[sample(nrow(dll_data), size = 5, replace = T ),]
dll_data2 <- rbind(dll_data, new_rows)
str(dll_data2)
new_rows <- dll_data[sample(nrow(dll_data), size = 5, replace = T ),]
dll_data2 <- rbind(dll_data, new_rows)
str(dll_data2)
duplicated(dll_data2)
sum(duplicated(dll_data2))
sum(duplicated(dll_data2))
dll_data2[duplicated(dll_data2), ]
dll_data_unique <- unique(dll_data2)
dim(dll_data_unique)
dim(dll_data2)
any(duplicated(dll_data_uniqe))
any(duplicated(dll_data_unique))
rm(dll_data_complete, dll_data_unique, dll_data2)
str(dll_data)
dll_data_wt <- subset(dll_data, genotype == "wt" )
dll_data_wt_V2 <- dll_data_wt[dll_data_wt$genotype == "wt", ]
dim(dll_data_wt)
dim(dll_data_wt_V2)
table(dll_data_wt$genotype)
table(dll_data$genotype)
summary(dll_data_wt$genotype)
summary(dll_data_wt$genotype)
dll_data_wt$genotype <- droplevels(dll_data_wt$genotype)
summary(dll_data_wt$genotype)
levels(dll_data$line)
dll_data$line <- as.character(dll_data$line)
levels(dll_data$line)
class(dll_data$line)
?substr
line_names <- substr(line_str,
start = 6, stop= 1000000L )
line_str <- as.character(dll_data$line)
str(line_str)
head(line_str)
line_names <- substr(line_str,
start = 6, stop= 1000000L )
head(line_names)
tail(line_names)
line_names
line_names2 <- strsplit(line_str, split = "-")
head(line_names2)
?strsplit
line_names2_mat <- matrix(unlist(line_names2),
ncol = 2,
byrow = TRUE)
head(line_names2_mat)
temp_string <- stringr::str_split(line_str,
pattern = "-",
simplify = TRUE)
head(temp_string)
line_names3 <- c("M", "m", "F", "F", "f", "M")
ine_names3
line_names3
line_names3 <- tolower(line_names3)
line_names3
str(dll_data$temp)
temp_as_factor <- with(dll_data,
factor(temp,
labels = c("LowTemp", "HighTemp")))
str(temp_as_factor)
temp_as_factor2 <- with(dll_data, ifelse(temp == 25, "LowTemp",
ifelse(temp == 30, "HighTemp", NA)))
temp_as_factor2 <- factor(temp_as_factor2)
str(temp_as_factor2)
head(sort(dll_data$SCT))
tail(sort(dll_data$SCT))
head(order(dll_data$SCT))
?order
dll_data_sorted <- dll_data[order(dll_data$SCT),]
head(dll_data_sorted)
line_names <- dll_data$line
levels(line_names)
elevations <- c(100, 300, 270, 250, 500, 900, 500, 1100, 500,
3000,500, 570, 150, 800, 600, 500, 1900, 100,
300, 270, 250, 500, 900, 500, 1100, 500, 600)
MeanDayTimeTemp <- c(rnorm(27, mean = 20, sd = 5))
elevation_data <- data.frame(levels(line_names),
elevations,
MeanDayTimeTemp)
line_names <- dll_data$line
levels(line_names)
str( dll_data$line)
line_names <- as.factor(dll_data$line)
levels(line_names)
elevations <- c(100, 300, 270, 250, 500, 900, 500, 1100, 500,
3000,500, 570, 150, 800, 600, 500, 1900, 100,
300, 270, 250, 500, 900, 500, 1100, 500, 600)
MeanDayTimeTemp <- c(rnorm(27, mean = 20, sd = 5))
elevation_data <- data.frame(levels(line_names),
elevations,
MeanDayTimeTemp)
elevation_data
dll_data
names(dll_data)
names(elevation_data)
names(elevation_data)[1] <- "line"
str(elevation_data)
merged_data <- merge(x = elevation_data,
y = dll_data,
sort = TRUE)
merged_data
View(merged_data)
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
library(Biostrings)
install.packages("BiocManager")
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
BiocManager::install("BSgenome")
BiocManager::\link{repositories}()
BiocManager::{repositories}()
BiocManager::repositories()
BiocManager::update.packages()
update.packages()
BiocManager::available()
BiocManager::valid()
BiocManager::install("loo", update = TRUE, ask = FALSE, force = TRUE)
BiocManager::valid()
available.genomes()
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
available.genomes()
install.packages("Matrix")
library(BiocManager) # current way
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
available.genomes()
BiocManager::install("BSgenome.Dmelanogaster.UCSC.dm6")
BiocManager::install("BSgenome.Dmelanogaster.UCSC.dm6")
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
class(BSgenome.Dmelanogaster.UCSC.dm6)
typeof(BSgenome.Dmelanogaster.UCSC.dm6) # an S4 object
str(BSgenome.Dmelanogaster.UCSC.dm6)  # not so useful from a bioinformatics analysis perspective
BSgenome.Dmelanogaster.UCSC.dm6
Dm6
?available.genomes
av_gen <- available.genomes(splitNameParts=TRUE)
table(av_gen$organism)
table(av_gen$provider)
av_gen$organism
str(av_gen$organism)
str(av_gen)
View(av_gen)
av_gen[av_gen$organism == "Dmelanogaster",]
length(Dm6)  # this is how many "chromosomes" (usually contigs) in this genome
names(Dm6)
names(Dm6)[1:8]
length(names(Dm6)) # same as length of the genome BSgenome object
?BiocGenerics
show(Dm6)
organism(Dm6)
isS4(Dm6)
seqlengths(Dm6) # length of each contig.
head(sort(seqlengths(Dm6), decreasing  = TRUE))
seqinfo(Dm6)
sort(names(Dm6))
sort(Dm6)
alphabetFrequency(Dm6$chr2R)
? alphabetFrequency
alphabetFrequency(Dm6$chr2R, as.prob = TRUE)
alphabetFrequency(Dm6$chr2R,
letters = c("A", "C", "G", "T")
as.prob = TRUE)
alphabetFrequency(Dm6$chr2R,
letters = c("A", "C", "G", "T"),
as.prob = TRUE)
letterFrequency(Dm6$chr2R,
letters = c("A", "C", "G", "T"),
as.prob = TRUE)
letterFrequency(Dm6$chr2R,
letters = c("ACTTGACAA"))
dinucleotideFrequency(Dm6$chr2R)
trinucleotideFrequency(Dm6$chr2R)
dinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
trinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
oligonucleotideFrequency(Dm6$chr2R, width = 6, as.prob = TRUE)
?oligonucleotideTransition
?oligonucleotideTransitions
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, width = 2, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, 2, as.prob = TRUE)
dm_chrX <- getSeq(Dm6, names = "chrX")
dm_chrX
show(dm_chrX)
print(dm_chrX)
class(dm_chrX) # This is now a DNAString type object, not a BSgenome object
typeof(dm_chrX)
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
nchar(dm_chrX)/1e6
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
nchar(dm_chrX)/1e6
show(dm_chrX)
print(dm_chrX)
alphabetFrequency(dm_chrX, baseOnly = T, as.prob = T)
dm_chr3L <- getSeq(Dm6, names = "chr3L",
start = 1000000,
end = 2000000,
strand = "-")
alphabetFrequency(dm_chr3L, baseOnly = T, as.prob = T)
seqs <- c("CCCGGG", "CCCCTTTT", "AAATTT", "TAGCT")
n = sapply(seqs, function(x) countPattern(x, dm_chrX ))
n
which.max(n)
?countPattern
seqs2 <- c("CCCNGG", "CCCNTTTT", "AAANTT", "TAGNT")
n = sapply(seqs2, function(x) countPattern(x, dm_chrX, fixed = FALSE ))
n
which.max(n)
data(HNF4alpha)
HNF4alpha
class(HNF4alpha)
HNF4alpha
View(HNF4alpha)
str(HNF4alpha)
?HNF4alpha
?DNAStringSet
object.size(HNF4alpha)
length(HNF4alpha)
rc_dm_chr3L <- reverseComplement(dm_chr3L)
pfm <- consensusMatrix(HNF4alpha)
pfm
print(HNF4alpha)
unlist(HNF4alpha)
HNF4alpha[1:71,]
HNF4alpha[1:10,]
HNF4alpha[1:20,]
round(pfm[1:4,]/colSums(pfm[1:4,]), 2)
class(pfm)
pwm <- PWM(pfm)
pwm <- PWM(HNF4alpha,
type = "prob")
pwm
round(pwm[1:4,]/colSums(pwm[1:4,]), 2)
maxWeights(pwm)
?maxWeights
conMat <- consensusMatrix(HNF4alpha, as.prob = T)[1:4,]
seqLogo(conMat)
seqLogo(pwm[1:4,]/colSums(pwm[1:4,]))
TF_hits <- matchPWM(pwm, dm_chrX, with.score = TRUE)
length(TF_hits)
head(mcols(TF_hits)$score)
hist(mcols(TF_hits)$score)
?matchPWM
TF_hits_rc <- matchPWM(reverseComplement(pwm), dm_chrX, with.score = TRUE)
length(TF_hits_rc)
hist(mcols(TF_hits_rc)$score)
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
up10000seqs <- extractUpstreamSeqs(dm, dm_txdb, width=10000)
dm_txdb
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
up10000seqs <- extractUpstreamSeqs(dm, dm_txdb, width=10000)
? makeTxDbFromUCSC
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
Dm6
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
up10000seqs <- extractUpstreamSeqs(dm, dm_txdb, width=10000)
dm6
dm_txdb <- makeTxDbFromUCSC("dm6")
?makeTxDbFromUCSC
q()
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
available.genomes()
?available.genomes
av_gen <- available.genomes(splitNameParts=TRUE)
table(av_gen$organism)
View(av_gen)
View(av_gen)
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
class(BSgenome.Dmelanogaster.UCSC.dm6)
typeof(BSgenome.Dmelanogaster.UCSC.dm6) # an S4 object
str(BSgenome.Dmelanogaster.UCSC.dm6)  # not so useful from a bioinformatics analysis perspective, but notice the "@" not "$"
length(Dm6)  # this is how many "chromosomes" (usually contigs, not actual chromosomes) in this genome
names(Dm6)
names(Dm6)[1:8]
length(names(Dm6)) # same as length of the genome BSgenome object
seqlengths(Dm6) # length of each contig.
head(sort(seqlengths(Dm6), decreasing  = TRUE))
seqinfo(Dm6)
sum(seqlengths(Dm6)[1:8])
sum(seqlengths(Dm6)[1:8])/1e6  # Mbp
alphabetFrequency(Dm6$chr2R)
alphabetFrequency(Dm6$chr2R, as.prob = TRUE)
dinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
oligonucleotideFrequency(Dm6$chr2R, width = 6, as.prob = TRUE)
hexamers <- oligonucleotideFrequency(Dm6$chr2R,
width = 6, as.prob = TRUE)
head(hexamers)
hexamers[rownames(hexamers) = c( "AAAAAA", "TTTTTT",
"GGGGGG", "CCCCCC")]
hexamers[rownames(hexamers) == c( "AAAAAA", "TTTTTT",
"GGGGGG", "CCCCCC")]
names(hexamers)
hexamers[names(hexamers) == c( "AAAAAA", "TTTTTT",
"GGGGGG", "CCCCCC")]
hexamers[names(hexamers) == c( "AAAAAA", "ATTGCC", "GGGGGG", "CCCCCC")]
hexamers[names(hexamers) == c("TTTTTT", "AAAAAA",
"GGGGGG", "CCCCCC")]
hexamers[names(hexamers) == c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
hexamers[names(hexamers) %in% c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
head(hexamers)
dm_chrX <- getSeq(Dm6, names = "chrX")
dm_chrX
show(dm_chrX)
print(dm_chrX)
class(dm_chrX) # This is now a DNAString type object, not a BSgenome object
typeof(dm_chrX)
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
blah <- "ATGTATAGTAATA"
length(blah)
methods(length)
nchar(dm_chrX)/1e6
alphabetFrequency(dm_chrX, baseOnly = T, as.prob = T)
dm_chr3L <- getSeq(Dm6, names = "chr3L",
start = 1000000,
end = 2000000,
strand = "-")
alphabetFrequency(dm_chr3L, baseOnly = T, as.prob = T)
rc_dm_chr3L <- reverseComplement(dm_chr3L)
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, 2, as.prob = TRUE)
seqs <- c("CCCGGG", "CCCCTTTT", "AAATTT", "TAGCT")
n = sapply(seqs, function(x) countPattern(x, dm_chrX ))
n
which.max(n)
?countPattern
seqs2 <- c("CCCNGG", "CCCNTTTT", "AAANTT", "TAGNT")
n = sapply(seqs2, function(x) countPattern(x, dm_chrX, fixed = FALSE ))
n
which.max(n)
data(HNF4alpha)
HNF4alpha
pfm <- consensusMatrix(HNF4alpha)
pfm
round(pfm[1:4,]/colSums(pfm[1:4,]), 2)
class(pfm)
pfm
pwm <- PWM(pfm)
pwm <- PWM(HNF4alpha,
type = "prob")
pwm
maxWeights(pwm)
conMat <- consensusMatrix(HNF4alpha, as.prob = T)[1:4,]
conMat
seqLogo(conMat)
