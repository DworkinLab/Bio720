seqLogo(conMat)
rna_counts <- read.table("https://raw.githubusercontent.com/DworkinLab/DrosophilaSociabilityTranscriptomics/main/data/star/star_count_matrix.txt",
header = TRUE)
dim(rna_counts)
str(rna_counts)
nrow(rna_counts)
ncol(rna_counts)
anyNA(rna_counts)
class(rna_counts)
mode(rna_counts)
rna_counts[1:6, 1:6]
rownames(rna_counts)[1:6]
rna_counts2 <- rna_counts[, 2:143] # or [, -1]
rownames(rna_counts2) <- rna_counts$gene
rna_counts2[1:6, 1:6]
View(rna_counts2)
colnames(rna_counts2)
sample_names <- colnames(rna_counts)
class(sample_names)
sample_names <- colnames(rna_counts2)
class(sample_names)
sample_names
str_split_fixed
str_split_fixed()
library("stringr")
?str_split_fixed
sample_names_matrix <- str_split_fixed(string = sample_names,
pattern = "_",
n = 7)
sample_names_matrix2 <- str_split(string = sample_names,
pattern = "_",
simplify = TRUE)
View(sample_names_matrix)
colnames(sample_names_matrix) <- c("initials", "treatment", "lineage", "sex", "environment", "sample", "lane")
View(sample_names_matrix)
View(rna_counts2)
rownames(sample_names_matrix) <- sample_names
View(sample_names_matrix)
View(rna_counts2)
sum(rna_counts2[,1])
sum(rna_counts2[,2])
read_sums <- colSums(rna)
read_sums <- colSums(rna_counts)
read_sums <- colSums(rna_counts2)
length(read_sums)
read_sums
apply(X = rna_counts2, MARGIN = 2, sum)
read_sums
read_sums_alt2 <- rep(NA,ncol(rna_counts2))
read_sums_alt2
?rep
for (i in 1:ncol(rna_counts2)) {
read_sums_alt2[i] <- sum(rna_counts2[, i])
}
read_sums_alt1 <- apply(X = rna_counts2, MARGIN = 2, sum)
read_sums_alt2
names(read_sums_alt2) <- colnames(rna_counts2)
length(read_sums_alt2)
head(read_sums_alt2)
read_sums_alt2 <- rep(x = NA,
times = ncol(rna_counts2))
names(read_sums_alt2) <- colnames(rna_counts2)
length(read_sums_alt2)
head(read_sums_alt2)
for (i in 1:ncol(rna_counts2)) {
read_sums_alt2[i] <- sum(rna_counts2[, i])
}
i
rm(i)
head(read_sums)
head(read_sums_alt1)
head(read_sums_alt2)
?colSums
seq_along()
seq_along
?seq_along
fly_seq <- c(A = "ACTGGCCA", B = "ACTGGCCT", C = "ACTGTCCA" )
print(fly_seq)
writeLines(fly_seq)
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(100, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(100, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seq_gen
seq_gen()
rbinom(100, 100, 0.8)
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(1, 100, 0.8),
replace = T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
seqs
rbinom(1, 100, 0.8)
?rbinom
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(100, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(1, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
length(seqs)
nchar(seqs)
str_length(seqs)
library(stringr)
library(stringi)
library(tidytext)
length(seqs)
nchar(seqs)
str_length(seqs)
stri_length(seqs)
library(BiocManager)
BiocManager::install(c("BSgenome", "GenomicFeatures", "Biostrings", "seqLogo"))
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
BiocManager::available()
available.genomes()
BiocManager::install("BSgenome.Dmelanogaster.UCSC.dm6")
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
Dm6
str(BSgenome.Dmelanogaster.UCSC.dm6)  # not so useful from a bioinformatics analysis perspective, but notice the "@" not "$"
length(Dm6)  # this is how many "chromosomes" (usually contigs, not actual chromosomes) in this genome
names(Dm6)
names(Dm6)[1:8]
?BiocGenerics
show(Dm6)
organism(Dm6)
isS4(Dm6)
seqlengths(Dm6) # length of each contig.
seqinfo(Dm6)
alphabetFrequency(Dm6$chr2R, as.prob = TRUE)
dinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
?alphabetFrequency
hasOnlyBaseLetters(Dm6$chr2R, as.prob = TRUE)
hasOnlyBaseLetters(Dm6$chr2R)
letterFrequency(Dm6$chr2R, letters = c("A", "C", "T", G), as.prob = TRUE)
letterFrequency(Dm6$chr2R, letters = c("A", "C", "T", "G"), as.prob = TRUE)
letterFrequencyInSlidingView(Dm6$chr2R, view.width = 10^6, letters = c("A", "C", "T", "G"), as.prob = TRUE)
letterFrequencyInSlidingView(Dm6$chr2R, view.width = 10^5, letters = c("A", "C", "T", "G"), as.prob = TRUE)
letterFrequencyInSlidingView(Dm6$chr2R, view.width = c(1000, 1000, 10^6), letters = c("A", "C", "T", "G"), as.prob = TRUE)
letterFrequencyInSlidingView(Dm6$chr2R, view.width = 100000, letters = c("A", "C", "T", "G"), as.prob = TRUE)
hexamers <- oligonucleotideFrequency(Dm6$chr2R,
width = 6, as.prob = TRUE)
head(hexamers)
hexamers[names(hexamers) %in% c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
hexamers
hexamers[names(hexamers) %in% c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
dm_chrX <- getSeq(Dm6, names = "chrX")
dm_chrX
show(dm_chrX)
class(dm_chrX) # This is now a DNAString type object, not a BSgenome object
typeof(dm_chrX)
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
nchar(dm_chrX)/1e6
alphabetFrequency(dm_chrX, baseOnly = T, as.prob = T)
seqs <- c("CCCGGG", "CCCCTTTT", "AAATTT", "TAGCT")
n = sapply(seqs, function(x) countPattern(x, dm_chrX ))
n
which.max(n)
data(HNF4alpha)
HNF4alpha
print(HNF4alpha)
length(HNF4alpha)
class(HNF4alpha)
pfm <- consensusMatrix(HNF4alpha)
pfm
round(pfm[1:4,]/colSums(pfm[1:4,]), 2)
class(pfm)
pwm <- PWM(pfm)
pwm <- PWM(HNF4alpha,
type = "prob")
round(pwm[1:4,]/colSums(pwm[1:4,]), 2)
maxWeights(pwm)
conMat <- consensusMatrix(HNF4alpha, as.prob = T)[1:4,]
seqLogo(conMat)
TF_hits <- matchPWM(pwm, dm_chrX, with.score = TRUE)
length(TF_hits)
head(mcols(TF_hits)$score)
hist(mcols(TF_hits)$score)
TF_hits_rc <- matchPWM(reverseComplement(pwm), dm_chrX, with.score = TRUE)
length(TF_hits_rc)
hist(mcols(TF_hits_rc)$score)
p_vals_out <- rep(NA, length(feature_test))
# Chunk 1
knitr::opts_chunk$set(eval = FALSE)
# Chunk 2
p_test <- function(p){
if (p <= 0.05) print ("yeah!!!!")
else if (p >= 0.9) print ("high!!!!")
else print ("somewhere in the middle")
}
# Chunk 3
p_test()
p_test_2 <- function(p){
ifelse(test = p <= 0.05,
yes = print("yippee"),
no = print("bummer")) }
p_test_2(test_val_2)
(test_val_2 <- runif(n = 100))
p_test <- function(p){
if (p <= 0.05) print ("yeah!!!!")
else if (p >= 0.9) print ("high!!!!")
else print ("somewhere in the middle")
}
p_test()
p_test(0.5)
(test_val_2 <- runif(n = 100))
p_test(test_val_2)
p_test_2 <- function(p){
ifelse(test = p <= 0.05,
yes = print("yippee"),
no = print("bummer")) }
p_test_2(test_val_2)
table(p_test_2(test_val_2))
p_test_2 <- function(p){
ifelse(test = p <= 0.5,
yes = print("yippee"),
no = print("bummer")) }
p_test_2(test_val_2)
table(p_test_2(test_val_2))
p_test_2 <- function(p){
ifelse(test = p <= 0.05,
yes = print("yippee"),
no = print("bummer")) }
p_vals_out <- rep(NA, length(feature_tests))
feature_tests <- runif(n = 17300, min = 0, max = 1)
p_vals_out <- rep(NA, length(feature_tests))
p_vals_out <- rep(NA, length(feature_tests))
for (i in 1:length(p_vals_out)) {
p_vals_out[i] <- p_test(feature_tests[i])
}
?sapply
p_vals_sapply_out <- sapply(feature_tests, p_vals_out())
p_vals_sapply_out <- sapply(feature_tests, p_test())
p_vals_sapply_out <- sapply(feature_tests, p_test(x))
p_vals_sapply_out <- sapply(feature_tests, p_test)
p_test_V2 <- function(p){
if (p <= 0.05) x = "yeah!!!!"
else if (p >= 0.9) x = "high!!!!"
else x = "somewhere in the middle"
return(x)
}
p_test_V2(0.5)
p_vals_sapply_out <- sapply(feature_tests, p_test_V2)
p_vals_sapply_out
p_test_3 <- function(p){
ifelse(test = p <= 0.05,
yes = "yippee",
no =  "bummer") }
p_test_3 <- function(p){
ifelse(test = p <= 0.05,
yes = "yippee",
no =  "bummer") }
p_test_3(feature_tests)
# Chunk 1
read_1 <- "CGCGCAGTAGGGCACATGCCAGGTGTCCGCCACTTGGTGGGCACACAGCCGATGACGAACGGGCTCCTTGACTATAATCTGACCCGTTTGCGTTTGGGTGACCAGGGAGAACTGGTGCTCCTGC"
read_2 <- "AAAAAGCCAACCGAGAAATCCGCCAAGCCTGGCGACAAGAAGCCAGAGCAGAAGAAGACTGCTGCGGCTCCCGCTGCCGGCAAGAAGGAGGCTGCTCCCTCGGCTGCCAAGCCAGCTGCCGCTG"
read_3  <- "CAGCACGGACTGGGGCTTCTTGCCGGCGAGGACCTTCTTCTTGGCATCCTTGCTCTTGGCCTTGGCGGCCGCGGTCGTCTTTACGGCCGCGGGCTTCTTGGCAGCAGCACCGGCGGTCGCTGGC"
# Chunk 2
reads <- c(read_1, read_2, read_3)
nchar(reads)
# Chunk 3
for (i in read_1) {
print(i)
}
read_1_split <- strsplit(read_1, split = "", fixed = T) # a list
read_1_char <- as.character(unlist(read_1_split))
mode(read_1_char)
for (i in read_1_split){
print(i)
}
for (i in read_1_char){
print(i)
}
read_1 <- "CGCGCAGTAGGGCACATGCCAGGTGTCCGCCACTTGGTGGGCACACAGCCGATGACGAACGGGCTCCTTGACTATAATCTGACCCGTTTGCGTTTGGGTGACCAGGGAGAACTGGTGCTCCTGC"
read_2 <- "AAAAAGCCAACCGAGAAATCCGCCAAGCCTGGCGACAAGAAGCCAGAGCAGAAGAAGACTGCTGCGGCTCCCGCTGCCGGCAAGAAGGAGGCTGCTCCCTCGGCTGCCAAGCCAGCTGCCGCTG"
read_3  <- "CAGCACGGACTGGGGCTTCTTGCCGGCGAGGACCTTCTTCTTGGCATCCTTGCTCTTGGCCTTGGCGGCCGCGGTCGTCTTTACGGCCGCGGGCTTCTTGGCAGCAGCACCGGCGGTCGCTGGC"
reads <- c(read_1, read_2, read_3)
nchar(reads)
for (i in read_1) {
print(i)
}
read_1_split <- strsplit(read_1, split = "", fixed = T) # a list
read_1_char <- as.character(unlist(read_1_split))
mode(read_1_char)
for (i in read_1_split){
print(i)
}
for (i in read_1_char){
print(i)
}
for (i in read_1_char){
print(i)
}
site_freq_list <- table(read_1_split)/lengths(read_1_split)
site_freq_list
site_freq_list_V2 <- table(read_1_split)/sum(table(read_1_split))
print(site_freq_list, digits = 2)
print(site_freq_list_V2, digits = 2)
lengths(read_1_split)
site_freq_string <- table(read_1_char)/length(read_1_char)
site_freq_string_V2 <- table(read_1_char)/sum(table(read_1_char))
print(site_freq_string, digits = 2)
print(site_freq_string_V2, digits = 2)
site_freq_string_V2 <- table(read_1_char)/sum(table(read_1_char))
print(site_freq_string, digits = 2)
print(site_freq_string_V2, digits = 2)
reads <- c(read_1, read_2, read_3)
nchar(reads)
for (i in read_1) {
print(i)
}
read_1_split <- strsplit(read_1, split = "", fixed = T) # a list
read_1_char <- as.character(unlist(read_1_split))
mode(read_1_char)
for (i in read_1_split){
print(i)
}
for (i in read_1_char){
print(i)
}
table(read_1_split)
lengths(read_1_split)
site_freq_list
site_freq_list <- table(read_1_split)/lengths(read_1_split)
sum(table(read_1_split))
print(site_freq_list, digits = 2)
print(site_freq_list_V2, digits = 2)
length(read_1_char)
table(read_1_char)
length(read_1_char)
read_1_char
site_freq_string <- table(read_1_char)/length(read_1_char)
site_freq_string_V2 <- table(read_1_char)/sum(table(read_1_char))
print(site_freq_string, digits = 2)
print(site_freq_string_V2, digits = 2)
rna_counts <- read.table("https://raw.githubusercontent.com/DworkinLab/DrosophilaSociabilityTranscriptomics/main/data/star/star_count_matrix.txt",
header = TRUE)
rna_counts2 <- rna_counts[, 2:143] # or [, -1]
rownames(rna_counts2) <- rna_counts$gene
rna_counts2[1:6, 1:6]
sample_names <- colnames(rna_counts2)
class(sample_names)
library("stringr")
sample_names_matrix <- str_split_fixed(string = sample_names,
pattern = "_",
n = 7)
# alternative (but can cause issues if there are problems with the delimiters)
sample_names_matrix2 <- str_split(string = sample_names,
pattern = "_",
simplify = TRUE)
colnames(sample_names_matrix) <- c("initials", "treatment", "lineage", "sex", "environment", "sample", "lane")
rownames(sample_names_matrix) <- sample_names
sum(rna_counts2[,1])
read_sums <- colSums(rna_counts2)
length(read_sums)
read_sums
read_sums_alt1 <- apply(X = rna_counts2, MARGIN = 2, sum)
?all.equal
read_sums_alt1 <- apply(X = rna_counts2, MARGIN = 2, sum)
all.equal(read_sums, read_sums_alt1 )
read_sums_alt2 <- rep(x = NA,
times = ncol(rna_counts2))
names(read_sums_alt2) <- colnames(rna_counts2) # just so we have the sample names
length(read_sums_alt2)
head(read_sums_alt2)
for (i in 1:ncol(rna_counts2)) {
read_sums_alt2[i] <- sum(rna_counts2[, i])
}
rm(i) # a bit of cleanup
all.equal(read_sums, read_sums_alt2)
log2_transformed_bad <- log2(rna_counts2)
gene_means <- colMeans(rna_counts2)
gene_means
head(log2_transformed_bad)
?colMeans
gene_means <- rowMeans(rna_counts2)
gene_means
gene_means[1:6]
gene_means <- .rowMeans(rna_counts2)
gene_means <- rowMeans(rna_counts2)
gene_means_v1 <- rowMeans(log2_transformed_bad)
gene_means_v1[1:6]
sample_means_v1 <- colMeans(log2_transformed_bad)
sample_means_v1 [1:6]
sample_means_apply <- apply(log2_transformed_bad, 2, mean)
sample_means_apply[1:6]
all.equal(sample_means_apply, sample_means_v1)
table(sample_means_apply == sample_means_v1)
rna_counts3 <- rna_counts2
rna_counts3[1:6, 1:6]
rna_counts2[1:6, 1:6]
rna_counts3[1:6, 1:6]
rna_counts2[1:3, 1:3]
rna_counts3[1:3, 1:3]
rna_counts3 <- rna_counts2 + 1 # to deal with the issue of log
rna_counts2[1:3, 1:3]
rna_counts3[1:3, 1:3]
log2_transformed_better <- log2(rna_counts3)
sample_means_log_v1 <- colMeans(log2_transformed_better)
sample_means_log_v1[1:6]
sample_means_log_apply[1:6]
sample_means_log_apply <- apply(log2_transformed_better, 2, mean)
sample_means_log_apply[1:6]
all.equal(sample_means_log_apply, sample_means_log_v1)
table(sample_means_log_apply == sample_means_log_v1)
class(sample_means_log_apply)
class(sample_means_log_v1)
mode(sample_means_log_apply)
mode(sample_means_log_v1)
sample_means_log_apply == sample_means_log_v1
sample_means_log_apply[,"AS_U_L4_F_S_S3_L002"]
sample_means_log_apply["AS_U_L4_F_S_S3_L002"]
sample_means_log_v1["AS_U_L4_F_S_S3_L002"]
mode(sample_means_log_apply["AS_U_L4_F_S_S3_L002"])
mode(sample_means_log_v1["AS_U_L4_F_S_S3_L002"])
?all.equal
identical(sample_means_log_apply, sample_means_log_v1)
?identical
print("this is \"me\"")
writeLines("this is \"me\"")
print("this is \"me\"")
writeLines("this is \"me\"")
fly_seq <- c(A = "ACTGGCCA", B = "ACTGGCCT", C = "ACTGTCCA" )
print(fly_seq)
writeLines(fly_seq, sep = " ")
writeLines(fly_seq, sep ="\n")
cat(fly_seq, sep ="\n")
cat(fly_seq)
writeLines(fly_seq, sep ="\n")
cat(fly_seq)
cat(fly_seq, sep ="\n")
seq_gen <- function() {
x <- sample(c("A", "C", "T", "G"),
size = rbinom(1, 100, 0.8),
replace =T)
paste0(x, collapse="")
}
seqs <- replicate(20, seq_gen())
length(seqs)
nchar(seqs)
str_length(seqs)
stri_length(seqs)
library(stringr)
library(stringi)
library(tidytext)
str_length(seqs)
stri_length(seqs)
dll_data = read.csv("http://beaconcourse.pbworks.com/f/dll.csv",
h = TRUE, stringsAsFactors = TRUE)
is.na(dll_data)
sum(is.na(dll_data))
anyNA(dll_data)
mean(dll_data$femur)
mean(dll_data$femur, na.rm = TRUE)
dll_data <- na.omit(dll_data)
mean(dll_data$femur)
anyDuplicated(dll_data)
dll_data[891,]
dll_data[anyDuplicated(dll_data),]
new_rows <- dll_data[sample(nrow(dll_data), size = 5, replace = T ),]
dll_data2 <- rbind(dll_data, new_rows)
str(dll_data2)
sum(duplicated(dll_data2))
dll_data2[duplicated(dll_data2), ]
dll_data_unique <- unique(dll_data2)
dim(dll_data_unique)
dim(dll_data2)
dim(dll_data)
rm(dll_data_complete, dll_data_unique, dll_data2)
paste("variable", 1:5, sep="_")
variable_names <- paste("variable", 1:5, sep="_")
print(variable_names)
number_sequences <- rpois(1, 2000)
number_sequences
file_labels <- c("ID_GeneKnockdown2018_ds-RNAi_M_1_1",
"ID_GeneKnockdown2018_ds-RNAi_F_1_1",
"ID_GeneKnockdown2018_control_M_1_1",
"ID_GeneKnockdown2018_control_F_1_1")
str_split(file_labels, pattern = "_")
library(stringr)
library(stringi)
library(tidytext)
file_labels <- c("ID_GeneKnockdown2018_ds-RNAi_M_1_1",
"ID_GeneKnockdown2018_ds-RNAi_F_1_1",
"ID_GeneKnockdown2018_control_M_1_1",
"ID_GeneKnockdown2018_control_F_1_1")
str_split(file_labels, pattern = "_")
?str_split
