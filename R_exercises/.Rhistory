geom_jitter(height = 0.2, alpha = 0.2) +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_bw()
ggplot(data = dll_data, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.2, alpha = 0.2) +
geom_smooth(method = "lm") +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_histogram() +
xlab("femur length, mm") +
theme_bw()
?geom_histogram
ggplot(data = dll_data, aes(x = femur)) +
geom_histogram(position = NULL) +
xlab("femur length, mm") +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_histogram(fill = "grey") +
xlab("femur length, mm") +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_histogram(fill = "grey", colour = "black") +
xlab("femur length, mm") +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_density_2d(fill = "grey", colour = "black") +
xlab("femur length, mm") +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_density_2d() +
xlab("femur length, mm") +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_density() +
xlab("femur length, mm") +
theme_bw()
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library('BSgenome')
library(seqLogo)
available.genomes()
av_gen <- available.genomes(splitNameParts=TRUE)
table(av_gen$organism)
table(av_gen$provider)
av_gen[av_gen$organism == "Dmelanogaster",]
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
length(Dm6)  # this is how many "chromosomes" (usually contigs) in this genome
names(Dm6)
length(names(Dm6)) # same as length of the genome BSgenome object
seqinfo(Dm6)
dmel_transcript_lengths <- transcriptLengths(Dm6)
?makeTxDbFromUCSC
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
BiocManager::install("txdbmaker")
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
install.packages("RMariaDB")
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="refGene")
dm_txdb
class(dm_txdb) # as always, know what kind of object you are working with!
columns(dm_txdb)
keytypes(dm_txdb )  # GenomicFeatures uses a "key pairs" approach
head(transcripts(dm_txdb))  # let's look at the transcripts we have
dmel_transcript_lengths <- transcriptLengths(dm_txdb)
?transcriptLengths
dmel_transcript_lengths <- transcriptLengths(dm_txdb,
with.utr5_len = TRUE,
with.utr3_len = TRUE)
dim(dmel_transcript_lengths)
class(dmel_transcript_lengths)
View(dmel_transcript_lengths)
head(transcripts(dm_txdb))
?makeTxDbFromUCSC
dm_txdb <- makeTxDbFromUCSC("dm6", tablename="knownGene")
dm_txdb <- makeTxDbFromUCSC("dm6")
list_UCSC_genomes()
install.packages("UCSC.utils")
BiocManager::install("UCSC.utils")
supportedUCSCtables(genome="Dm6")
available.genomes()
supportedUCSCtables(genome="BSgenome.Dmelanogaster.UCSC.dm6")
?supportedUCSCtables
supportedUCSCtables()
class(dmel_transcript_lengths)
View(dmel_transcript_lengths)
? transcriptLengths
libary(DESeq2)
library(DESeq2)
head(dmel_transcript_lengths)
getwd()
write.csv(dmel_transcript_lengths, "dmel_transcriptLengths_UCSC.csv")
q()
#library(BiocInstaller) # old deprecated. Don't use, but you may see in old scripts.
library(BiocManager) # current way
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
BiocManager::available()
available.genomes()
?available.genomes
av_gen <- available.genomes(splitNameParts=TRUE)
table(av_gen$organism)
table(av_gen$provider)
av_gen[av_gen$organism == "Dmelanogaster",]
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
BSgenome.Dmelanogaster.UCSC.dm6
Dm6
class(BSgenome.Dmelanogaster.UCSC.dm6)
typeof(BSgenome.Dmelanogaster.UCSC.dm6) # an S4 object
str(BSgenome.Dmelanogaster.UCSC.dm6)  # not so useful from a bioinformatics analysis perspective, but notice the "@" not "$"
??"AnnotationHub"
BiocManager::install("AnnotationHub")
library(BiocManager)
library(Biostrings)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library(seqLogo)
library(BSgenome.Dmelanogaster.UCSC.dm6)
Dm6 <- BSgenome.Dmelanogaster.UCSC.dm6
class(BSgenome.Dmelanogaster.UCSC.dm6)
typeof(BSgenome.Dmelanogaster.UCSC.dm6) # an S4 object
str(BSgenome.Dmelanogaster.UCSC.dm6)  # not so useful from a bioinformatics analysis perspective, but notice the "@" not "$"
length(Dm6)  # this is how many "chromosomes" (usually contigs, not actual chromosomes) in this genome
length(names(Dm6)) # same as length of the genome BSgenome object
names(Dm6)
?BiocGenerics
show(Dm6)
organism(Dm6)
isS4(Dm6)
seqlengths(Dm6) # length of each contig.
seqinfo(Dm6)
alphabetFrequency(Dm6$chr2R, as.prob = TRUE)
dinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
trinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
oligonucleotideFrequency(Dm6$chr2R, width = 6, as.prob = TRUE)
hexamers <- oligonucleotideFrequency(Dm6$chr2R,
width = 6, as.prob = TRUE)
head(hexamers)
hexamers[names(hexamers) %in% c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, 2, as.prob = TRUE)
?oligonucleotideTransitions
alphabetFrequency(Dm6$chr2R,
baseOnly = T, as.prob = T)
?alphabetFrequency
dm_chrX <- getSeq(Dm6, names = "chrX")
dm_chrX
show(dm_chrX)
print(dm_chrX)
class(dm_chrX) # This is now a DNAString type object, not a BSgenome object
typeof(dm_chrX)
length(dm_chrX)/1e6  # hey, why does this work!?   ;)
nchar(dm_chrX)/1e6
BSgenome.Dmelanogaster.UCSC.dm6
Dm6
length(Dm6)  # this is how many "chromosomes" (usually contigs, not actual chromosomes) in this genome
names(Dm6)
names(Dm6)[1:8]
length(names(Dm6)) # same as length of the genome BSgenome object
str(Dm6)
?BiocGenerics
show(Dm6)
organism(Dm6)
isS4(Dm6)
seqlengths(Dm6) # length of each contig.
head(sort(seqlengths(Dm6), decreasing  = TRUE))
seqinfo(Dm6)
?seqinfo
str(seqinfo(Dm6))
seqinfo(Dm6)@seqlengths
str(seqinfo(Dm6))
head(seqinfo(Dm6)@seqnames, n = 10)
?seqlengths
head(seqinfo(Dm6)@seqnames, n = 10)
sum(seqinfo(Dm6)@seqlengths[1:8])
sum(seqinfo(Dm6)@seqlengths[1:8])/1e6
sum(seqlengths(Dm6)[1:8])
sum(seqlengths(Dm6)[1:8])/1e6  # Mbp
alphabetFrequency(Dm6$chr2R, as.prob = TRUE)
letterFrequency(Dm6$chr2R,
letters = c("A", "C", "G", "T"),
as.prob = TRUE)
dinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
trinucleotideFrequency(Dm6$chr2R, as.prob = TRUE)
oligonucleotideFrequency(Dm6$chr2R, width = 6, as.prob = TRUE)
?oligonucleotideFrequency
hexamers <- oligonucleotideFrequency(Dm6$chr2R,
width = 6, as.prob = TRUE)
head(hexamers)
hexamers[names(hexamers) %in% c("TTTTTT", "AAAAAA",  "GGGGGG", "CCCCCC")]
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, 2, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
letterFrequency(Dm6$chr2R,
letters = c("A", "C", "G", "T"),
as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, as.prob = TRUE)
oligonucleotideTransitions(Dm6$chr2R, 2, as.prob = TRUE)
dm_chrX <- getSeq(Dm6, names = "chrX")
dm_chrX
class(dm_chrX) # This is now a DNAString type object, not a BSgenome object
show(dm_chrX)
print(dm_chrX)
?"DNAString"
length(dm_chrX)
nchar(dm_chrX)
alphabetFrequency(dm_chrX, baseOnly = T, as.prob = T)
?getSeq
dm_chr3L <- getSeq(Dm6, names = "chr3L",
start = 1000000,
end = 2000000,
strand = "-")
alphabetFrequency(dm_chr3L, baseOnly = T, as.prob = T)
seqs <- c("CCCGGG", "CCCCTTTT", "AAATTT", "TAGCT")
n = sapply(seqs, function(x) countPattern(x, dm_chrX ))
n
?countPattern
seqs2 <- c("CCCNGG", "CCCNTTTT", "AAANTT", "TAGNT")
n = sapply(seqs2, function(x) countPattern(x, dm_chrX, fixed = FALSE ))
n
which.max(n)
data(HNF4alpha)
HNF4alpha
length(HNF4alpha)
class(HNF4alpha)
pfm <- consensusMatrix(HNF4alpha)
pfm
round(pfm[1:4,]/colSums(pfm[1:4,]), 2)
pwm <- PWM(pfm)
pwm
pwm <- PWM(HNF4alpha,
type = "prob")
pwm
maxWeights(pwm)
conMat <- consensusMatrix(HNF4alpha, as.prob = T)[1:4,]
conMat
seqLogo(conMat)
?seqLogo
knitr::opts_chunk$set(echo = TRUE)
options(digits = 3)
library(ggplot2)
library(ggbeeswarm)
library(ggthemes)
dll_data = read.csv("http://beaconcourse.pbworks.com/f/dll.csv",
h = T, stringsAsFactors = TRUE)
dll_data <- na.omit(dll_data)
str(dll_data)
dll_data$temp <- as.factor(dll_data$temp)
dll_data_subset <- dll_data[sample(nrow(dll_data), 300, replace = F),]
ggplot(data = dll_data_subset, aes(y = femur, x = tibia)) +
geom_point()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia)) +
geom_point(shape = 20, colour = "red", size = 0.9)
ggplot(data = dll_data_subset, aes(y = femur, x = tibia)) +
geom_point(shape = 20, colour = "red", size = 1.1)
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp)) +
geom_point(colour = "red", size = 1)
ggplot(data = dll_data_subset, aes(y = femur, x = tibia)) +
geom_point(aes(shape = temp), colour = "red", size = 1)
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(size = 1, alpha = 0.5) +
xlab("tibia length, mm") +
ylab("femur length, mm")
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(size = 1.25, alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm")
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(size = 1.25, alpha = 0.6) +
xlab("tibia length, mm") +
ylab("femur length, mm")
range_vals <- with(dll_data_subset, range(c(femur, tibia)))
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(size = 1, alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
xlim(range_vals) +
ylim(range_vals)
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(size = 1, alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
theme_light()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
theme_light()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
theme_classic()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(size = 1, alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
theme_bw(legend.position = "top")
?theme_bw
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(size = 1, alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
theme_bw()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, colour = genotype)) +
geom_point(size = 1.5, alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
facet_wrap(~temp) +
theme_light()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, colour = genotype)) +
geom_point(size = 1.5, alpha = 0.65) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
facet_wrap(~temp) +
theme_light()
ggplot(data = dll_data_subset, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.2, alpha = 0.5) +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_light()
ggplot(data = dll_data_subset, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.2, alpha = 0.6) +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_bw()
ggplot(data = dll_data_subset, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.15, alpha = 0.6) +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_bw()
ggplot(data = dll_data_subset, aes(y = tarsus, x = temp, colour = genotype)) +
geom_boxplot() +
ylab("tarsus length, mm") +
theme_light()
ggplot(data = dll_data_subset, aes(y = tarsus, x = temp, colour = genotype)) +
geom_boxplot(outliers = FALSE) +
geom_point(position = position_jitterdodge(), alpha = 0.25) +
ylab("tarsus length, mm") +
theme_tufte()
?position_jitterdodge
ggplot(data = dll_data_subset, aes(y = tarsus, x = temp, colour = genotype)) +
geom_boxplot(outliers = FALSE) +
geom_point(position = position_jitterdodge(jitter.height = 0), alpha = 0.25) +
ylab("tarsus length, mm") +
theme_tufte()
ggplot(data = dll_data, aes(y = tarsus, x = temp, colour = genotype)) +
geom_violin(aes(fill = genotype), alpha = 0.25) +
ylab("tarsus length, mm") +
theme_bw()
ggplot(data = dll_data_subset, aes(y = tarsus, x = temp, colour = genotype)) +
geom_quasirandom(aes(x = temp:genotype), alpha = 0.5) +
ylab("tarsus length, mm") +
theme_bw()
ggplot(data = dll_data_subset, aes(y = tarsus, x = temp, colour = genotype)) +
geom_quasirandom(alpha = 0.5, dodge.width = 0.75, bandwidth  = 0.1) +
ylab("tarsus length, mm") +
theme_light()
ggplot(data = dll_data_subset, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.2, alpha = 0.5) +
geom_vline(xintercept = mean(dll_data_subset$tarsus), lty = 2, alpha = 0.25) +
geom_hline(yintercept = mean(dll_data_subset$SCT),  lty = 2, alpha = 0.25) +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_tufte()
ggplot(data = dll_data, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.2, alpha = 0.2) +
geom_smooth(method = "lm") +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_bw()
ggplot(data = dll_data, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.2, alpha = 0.2) +
geom_smooth(method = "lm", alpha = 0.5) +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_bw()
ggplot(data = dll_data, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_smooth(method = "lm") +
geom_jitter(height = 0.2, alpha = 0.2) +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_histogram(fill = "grey", colour = "black") +
xlab("femur length, mm") +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_density() +
xlab("femur length, mm") +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_density() +
xlab("femur length, mm") +
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
options(digits = 3)
dll_data = read.csv("http://beaconcourse.pbworks.com/f/dll.csv",
h = T, stringsAsFactors = TRUE)
dll_data <- na.omit(dll_data)
str(dll_data)
dll_data$temp <- as.factor(dll_data$temp)
dll_data_subset <- dll_data[sample(nrow(dll_data), 300, replace = F),]
ggplot(data = dll_data_subset, aes(y = femur, x = tibia)) +
geom_point()
library(ggplot2)
library(ggbeeswarm)
library(ggthemes)
ggplot(data = dll_data_subset, aes(y = femur, x = tibia)) +
geom_point()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia)) +
geom_point(shape = 20, colour = "red", size = 1.1)
ggplot(data = dll_data_subset, aes(y = femur, x = tibia)) +
geom_point(aes(shape = temp), colour = "red", size = 1)
range_vals <- with(dll_data_subset, range(c(femur, tibia)))
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(size = 1, alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
xlim(range_vals) +
ylim(range_vals)
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
theme_light()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
theme_classic()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, shape = temp, colour = genotype)) +
geom_point(size = 1, alpha = 0.75) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
theme_bw()
ggplot(data = dll_data_subset, aes(y = femur, x = tibia, colour = genotype)) +
geom_point(size = 1.5, alpha = 0.65) +
xlab("tibia length, mm") +
ylab("femur length, mm") +
facet_wrap(~temp) +
theme_light()
ggplot(data = dll_data_subset, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.15, alpha = 0.6) +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_bw()
ggplot(data = dll_data_subset, aes(y = tarsus, x = temp, colour = genotype)) +
geom_boxplot() +
ylab("tarsus length, mm") +
theme_light()
ggplot(data = dll_data_subset, aes(y = tarsus, x = temp, colour = genotype)) +
geom_boxplot(outliers = FALSE) +
geom_point(position = position_jitterdodge(jitter.height = 0), alpha = 0.25) +
ylab("tarsus length, mm") +
theme_tufte()
ggplot(data = dll_data, aes(y = tarsus, x = temp, colour = genotype)) +
geom_violin(aes(fill = genotype), alpha = 0.25) +
ylab("tarsus length, mm") +
theme_bw()
ggplot(data = dll_data_subset, aes(y = tarsus, x = temp, colour = genotype)) +
geom_quasirandom(aes(x = temp:genotype), alpha = 0.5) +
ylab("tarsus length, mm") +
theme_bw()
ggplot(data = dll_data_subset, aes(y = tarsus, x = temp, colour = genotype)) +
geom_quasirandom(alpha = 0.5, dodge.width = 0.75, bandwidth  = 0.1) +
ylab("tarsus length, mm") +
theme_light()
ggplot(data = dll_data_subset, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.2, alpha = 0.5) +
geom_vline(xintercept = mean(dll_data_subset$tarsus), lty = 2, alpha = 0.25) +
geom_hline(yintercept = mean(dll_data_subset$SCT),  lty = 2, alpha = 0.25) +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_tufte()
ggplot(data = dll_data, aes(y = SCT, x = tarsus, colour = genotype)) +
geom_jitter(height = 0.2, alpha = 0.2) +
geom_smooth(method = "lm") +
ylab("SCT number") +
xlab("tarsus length, mm") +
facet_wrap(~temp) +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_histogram(fill = "grey", colour = "black") +
xlab("femur length, mm") +
theme_bw()
ggplot(data = dll_data, aes(x = femur)) +
geom_density() +
xlab("femur length, mm") +
theme_classic()
