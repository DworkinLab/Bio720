all_the_data$gene2
subset(all_the_data, select = c("gene2", "gene3", "genotype"))
subset(all_the_data,
select = c("gene2", "gene3", "genotype"))
all_the_data$gene4 <- c(10, 11, 7, 11, 2, 3)
all_the_data
str(all_the_data)
list_the_data = list(gene1, gene2, gene3, genotype, day)
list_the_data
str(list_the_data)
names(list_the_data)
list_the_data = list(gene1 = gene1, gene2 = gene2, gene3 = gene3, genotype = genotype, day = day)
list_the_data
str(list_the_data)
names(list_the_data)
list_the_data$random_variable = c(T,T,F)
list_the_data
str(list_the_data)
list_the_data$gene1
list_the_data[1]
list_the_data["gene1"]
list_the_data[[1]]
list_the_data[["gene1"]]
class(list_the_data$gene1)
class(list_the_data[1])
class(list_the_data["gene1"])
class(list_the_data[[1]])
class(list_the_data[["gene1"]])
str(list_the_data$gene1)
str(list_the_data[1])
str(list_the_data["gene1"])
str(list_the_data[[1]])
str(list_the_data[["gene1"]])
as.numeric(list_the_data[1])
str(as.numeric(unlist(list_the_data[1])))
as.numeric(list_the_data[1])
summary(cars)
z = 3:5
typeof(z)
# because of how division is computed in R, it converts to double
typeof(z/z)
#  though, addition, substraction and multiplication do not require this, so stay integer
typeof(z*z)
typeof(z)
typeof(z/z)
typeof(z*z)
typeof(z^2)
typeof(z+z)
typeof(z-z)
typeof(sqrt(z))
rm( x, y, z) # clean up
x = 1
y = "1"
z = "one"
a = TRUE
b = "TRUE"
x == y
all.equal(x, y)
identical(x, y)
y == z
all.equal(y, z)
identical(y, z)
# Which might be obvious by
mode(y)
mode(z)
y == z
all.equal(y, z)
identical(y, z)
# Which might be obvious by
mode(y)
mode(z)
a == b
all.equal(a, b)
identical(a, b)
# Which might be obvious
mode(a); typeof(a)
mode(b); typeof(b)
rm(x, y, z, a, b)
x = T
x
y = TRUE
y
x == y
identical(x, y)
logical(1)
logical(T)
?logical
logical(length = 1)
logical(length = 5)
?double
double_up <- double(10)
double_up
numeric(10)
identical(numeric(10), double(10))
integer_10 <- integer(10)
integer_10
integer_10 <- integer(10, NA)
integer_10 <- integer(10, rep(NA, 10))
gene1 <- c(3, 4, 7, 9, 12, 6)
gene2 <- c(11, 17, 12, 25, 23, 7)
gene3 <- c(100, 103, 97, 94, 106, 111)
rm(all_the_data)
all_the_data <- data.frame(gene1, gene2, gene3, genotype, day)
str(all_the_data)
class(all_the_data)
mode(all_the_data)
x <- 1
for (i in 1:9) {
x <- x + 1
print(x)
}
x
rm(x)
countFun <-function(x)
{
for (i in 1:10) {
x <- x + 1
print(x)
}}
countFun(1)
x
# initialize a vector of length 1
x <- NA
#system.time( YOUR FOR LOOP HERE)
system.time( for (i in 1:10000) {
x[i] <- i^2})
# initialize a vector of length 1
x <- NA
system.time( for (i in 1:10000) {
x[i] <- i^2})
# initialize a vector of length 1
x <- NA
system.time( for (i in 1:10000) {
x[i] = i^2})
system.time( for (i in 1:10000) {
x[i] = i^2})
system.time( for (i in 1:10000) {
x[i] = i^2})
system.time( for (i in 1:10000) {
x[i] = i^2})
system.time(
for (i in 1:10000) {x[i] = i^2})
?system.time
rm(x)
x <- rep(NA, 10000)
system.time( for (i in 1:10000) {x[i] <- i^2})
system.time( for (i in 1:10000) {x[i] <- i^2})
system.time( for (i in 1:10000) {x[i] <- i^2})
# initialize a vector of length 1
x <- NA
system.time(
for (i in 1:10000) {x[i] <- i^2})
rm(x)
x <- rep(NA, 10000)
#system.time( YOUR FOR LOOP HERE)
system.time( for (i in 1:10000) {x[i] <- i^2})
rm(x)
x <- rep(NA, 10000)
#system.time( YOUR FOR LOOP HERE)
system.time( for (i in 1:10000) {x[i] <- i^2})
rm(x)
x <- rep(NA, 10000)
#system.time( YOUR FOR LOOP HERE)
system.time( for (i in 1:10000) {x[i] <- i^2})
rm(x)
x <- rep(NA, 10000)
#system.time( YOUR FOR LOOP HERE)
system.time( for (i in 1:10000) {x[i] <- i^2})
rm(x)
x <- 1:10000
system.time(x <- x^2)
rm(x)
x <- 1:10000
system.time(x <- x^2)
rm(x)
x <- 1:10000
system.time(x <- x^2)
rm(x)
x <- 1:10000
system.time(x <- x^2)
n <- 10000 # just run this once, each time you change n
rm(x)
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
rm(x)
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
x <- rep(NA, n)
system.time(for (i in 1:n) x[i] <- rnorm(1, mean = 5, sd = 5))
rm(list=ls())
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.25
# independent/explanatory variable
x <- rnorm( n = n, mean = 10, sd = 2)
# response/dependent variable
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
plot(y ~ x, pch = 20, cex = 1.5)
# use the `lm` function to fit a linear model (including  regression)
mod_1 <- lm(y ~ x)
summary(mod_1) # just to look at.
(p_val <- summary(mod_1)$coef[2,4])
rm(list=ls())
nsims = 100
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.25
pvals <- rep(NA, nsims)
for (p in 1:nsims) {
x <- rnorm( n = n, mean = 10, sd = 2)
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
mod_1 <- lm(y ~ x)
pvals[p] <- summary(mod_1)$coef[2,4]}
# proportion less than 0.05?
sum(pvals < 0.05)/length(pvals) # estimate of the power.
hist(pvals)
rm(list=ls())
nsims = 100
pow_sim_1 <- function(a, b, n,  std_dev){
x <- rnorm( n = n, mean = 10, sd = 2)
y <- rnorm(n = length(x), mean = a + b*x, sd = std_dev )
mod_1 <- lm(y ~ x)
return(summary(mod_1)$coef[2,4])
}
pvals <- replicate(n = nsims, pow_sim_1(a = 3, b = 0.25, n = 20, std_dev =1 ))
length(pvals)
sum(pvals < 0.05)/length(pvals)
hist(pvals)
rm(list=ls())
N = 200  # Number of simulations for inner loop. You generally want this to be >1000.
p = rep(NA, N) # initializing the vector to store the p values in the inner for loop.
#Global Parameter values
a = 3 # intercept
b <- seq(from=0, to=0.5, by=0.05)
sample_size <- seq(from = 10 ,to = 100 ,by = 5)  # Incremently increasing sample size
power.size <- numeric(length(sample_size)) # initializing the vector to store the power at each sample size for the outer for loop.
### initialize the matrix to store all of the power estimates
power.b <- matrix(NA,length(sample_size),length(b))
## Now the actual for loop
system.time(
for (k in 1:length(b))  # across the different values for the slope
{
b_b <- b[k]
for (j in 1:length(sample_size))  # looping through the different sample_sizes
{
s_s = sample_size[j]
for (i in 1:N)
{
x <- rnorm(s_s, mean = 10, sd = 2)  # simulate values of predictor
y_det <- a + b_b*x             # deterministic part of model
y_sim <- rnorm(s_s, mean = y_det, sd = 2)  # Simulate y|x values
lm1 <- lm(y_sim ~ x)                    # fit model given simulation
p[i] <- coef(summary(lm1))[2,4] # You may want to extract a different p-value from the model.
}
power.size[j] <- length(p[p<0.05])/N   # How many p-values are less than alpha (0.05)
}
power.b[,k] <- power.size
}
)
rm(list=ls())
N = 100  # Number of simulations for inner loop. You generally want this to be >1000.
p = rep(NA, N) # initializing the vector to store the p values in the inner for loop.
#Global Parameter values
a = 3 # intercept
b <- seq(from=0, to=0.5, by=0.05)
sample_size <- seq(from = 10 ,to = 100 ,by = 10)  # Incremently increasing sample size
power.size <- numeric(length(sample_size)) # initializing the vector to store the power at each sample size for the outer for loop.
### initialize the matrix to store all of the power estimates
power.b <- matrix(NA,length(sample_size),length(b))
## Now the actual for loop
system.time(
for (k in 1:length(b))  # across the different values for the slope
{
b_b <- b[k]
for (j in 1:length(sample_size))  # looping through the different sample_sizes
{
s_s = sample_size[j]
for (i in 1:N)
{
x <- rnorm(s_s, mean = 10, sd = 2)  # simulate values of predictor
y_det <- a + b_b*x             # deterministic part of model
y_sim <- rnorm(s_s, mean = y_det, sd = 2)  # Simulate y|x values
lm1 <- lm(y_sim ~ x)                    # fit model given simulation
p[i] <- coef(summary(lm1))[2,4] # You may want to extract a different p-value from the model.
}
power.size[j] <- length(p[p<0.05])/N   # How many p-values are less than alpha (0.05)
}
power.b[,k] <- power.size
}
)
# Now we graph it.
par(mfrow=c(1,2))
#3D perspective plot
persp(y=b, x=sample_size, z=power.b, col="blue", theta=-65,
shade=0.75, ltheta=45, ylab="slope", xlab="Sample Size",
lphi=30, zlim=c(0,1.25), ticktype = "detailed")
# contour plot
contour(z=power.b, x=sample_size, y=b, col="blue",  ylab="slope", xlab="Sample Size")
#fancy contour
filled.contour(z=power.b, x=sample_size, y=b,
ylim=c(min(b),max(b)), xlim=c(min(sample_size), max(sample_size)),
xlab="Sample Size", ylab="slope", color = topo.colors)
q()
# initialize a vector of length 1
x <- NA
#system.time( YOUR FOR LOOP HERE)
system.time(
for (i in 1:10000) {x[i] <- i^2})
n <- 10000 # just run this once, each time you change n
rm(x)
system.time(x <- replicate(n = n, expr = rnorm(1, mean = 5, sd = 5)))
rm(list=ls())
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.25
# independent/explanatory variable
x <- rnorm( n = n, mean = 10, sd = 2)
# response/dependent variable
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
plot(y ~ x, pch = 20, cex = 1.5, pch = 20)
# use the `lm` function to fit a linear model (including   a regression like here)
mod_1 <- lm(y ~ x)
summary(mod_1) # just to look at.
(p_val <- summary(mod_1)$coef[2,4])
plot(y ~ x, pch = 20, cex = 1.5)
rm(list=ls())
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.25
# independent/explanatory variable
x <- rnorm( n = n, mean = 10, sd = 2)
# response/dependent variable
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
plot(y ~ x, pch = 20, cex = 1.5)
# use the `lm` function to fit a linear model (including   a regression like here)
mod_1 <- lm(y ~ x)
summary(mod_1) # just to look at.
(p_val <- summary(mod_1)$coef[2,4])
rm(list=ls())
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.3
# independent/explanatory variable
x <- rnorm( n = n, mean = 10, sd = 2)
# response/dependent variable
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
plot(y ~ x, pch = 20, cex = 1.5)
# use the `lm` function to fit a linear model (including   a regression like here)
mod_1 <- lm(y ~ x)
summary(mod_1) # just to look at.
(p_val <- summary(mod_1)$coef[2,4])
rm(list=ls())
nsims = 1000
# sample size, n
n <- 20
# intercept, a
a = 3
# slope, b
b = 0.25
pvals <- rep(NA, nsims)
for (p in 1:nsims) {
x <- rnorm( n = n, mean = 10, sd = 2)
y <- rnorm(n = length(x), mean = a + b*x, sd = 1 )
mod_1 <- lm(y ~ x)
pvals[p] <- summary(mod_1)$coef[2,4]}
# proportion less than 0.05?
sum(pvals < 0.05)/length(pvals) # estimate of the power.
hist(pvals)
rm(list=ls())
nsims = 100
pow_sim_1 <- function(a, b, n,  std_dev){
x <- rnorm( n = n, mean = 10, sd = 2)
y <- rnorm(n = length(x), mean = a + b*x, sd = std_dev )
mod_1 <- lm(y ~ x)
return(summary(mod_1)$coef[2,4])
}
pvals <- replicate(n = nsims, pow_sim_1(a = 3, b = 0.3, n = 20, std_dev =1 ))
length(pvals)
sum(pvals < 0.05)/length(pvals)
hist(pvals)
rm(list=ls())
nsims = 1000
pow_sim_1 <- function(a, b, n,  std_dev){
x <- rnorm( n = n, mean = 10, sd = 2)
y <- rnorm(n = length(x), mean = a + b*x, sd = std_dev )
mod_1 <- lm(y ~ x)
return(summary(mod_1)$coef[2,4])
}
pvals <- replicate(n = nsims, pow_sim_1(a = 3, b = 0.3, n = 20, std_dev =1 ))
length(pvals)
sum(pvals < 0.05)/length(pvals)
hist(pvals)
read_1 <- "CGCGCAGTAGGGCACATGCCAGGTGTCCGCCACTTGGTGGGCACACAGCCGATGACGAACGGGCTCCTTGACTATAATCTGACCCGTTTGCGTTTGGGTGACCAGGGAGAACTGGTGCTCCTGC"
read_2 <- "AAAAAGCCAACCGAGAAATCCGCCAAGCCTGGCGACAAGAAGCCAGAGCAGAAGAAGACTGCTGCGGCTCCCGCTGCCGGCAAGAAGGAGGCTGCTCCCTCGGCTGCCAAGCCAGCTGCCGCTG"
read_3  <- "CAGCACGGACTGGGGCTTCTTGCCGGCGAGGACCTTCTTCTTGGCATCCTTGCTCTTGGCCTTGGCGGCCGCGGTCGTCTTTACGGCCGCGGGCTTCTTGGCAGCAGCACCGGCGGTCGCTGGC"
reads <- c(read_1, read_2, read_3)
for (i in read_1) {
print(i)
}
?strsplit
read_1_char <- as.character(unlist(read_1_split))
read_1_split <- strsplit(read_1, split = "", fixed = T) # a list
read_1_split
read_1_char <- as.character(unlist(read_1_split))
mode(read_1_char)
for (i in read_1_split){
print(i)
}
for (i in read_1_char){
print(i)
}
length(reads)
nchar(reads)
site_freq <- table(read_1_split)/lengths(read_1_split)
print(site_freq, digits = 2)
site_freq_alt <- table(read_1_char)/length(read_1_char)
print(site_freq_alt, digits = 2)
BaseFrequencies <- function(x) {
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
BaseFrequencies <- function(x) {
# if it is a single string still
if (length(x) == 1 & mode(x) == "character") {
x <- strsplit(x, split = "", fixed = T)
x <- as.character(unlist(x))
}
if (mode(x) == "list") {
tab <- table(x)/lengths(x)}
else {
tab <- table(x)/length(x)
}
return(tab)
}
?list
basefreq <- sapply(reads, BaseFrequencies, USE.NAMES = F)
print(basefreq, digits = 2)
q()
library(dplyr)
?select
library(data.table)
?data.table
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
summary(dll_data)
str(dll_data)
dim(dll_data)
head(dll_data)
head(is.na(dll_data))
# or more easily
anyNA(dll_data)
sum(is.na(dll_data))
anyNA(dll_data)
dll_data_complete <- na.omit(dll_data)
dim(dll_data)
dim(dll_data_complete)
1973 - 1918
dll_data <- na.omit(dll_data)
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
mean(dll_data$femur)
?mean
mean(dll_data$femur, na.rm = T )
dll_data_complete <- na.omit(dll_data)
dim(dll_data)
dim(dll_data_complete)
mean(dll_data_complete$femur)
head(duplicated(dll_data))
tail(duplicated(dll_data))
sum(duplicated(dll_data))
any(duplicated(dll_data))
anyDuplicated(dll_data)
dll_data[891,]
dll_data[890,]
dll_data[anyDuplicated(dll_data),]
new_rows <- dll_data[sample(nrow(dll_data), size = 5, replace = T ),]
dll_data2 <- rbind(dll_data, new_rows)
str(dll_data2)
duplicated(dll_data2)
any(duplicated(dll_data2))
dll_data2[duplicated(dll_data2),]
str(dll_data)
dll_data_wt <- dll_data[dll_data$genotype == "wt",]
with(dll_data, table(genotype))
nrow(dll_data_wt)
levels(dll_data_wt$genotype)
dll_data_wt <- dll_data[dll_data$genotype == "wt", drop =T]
dll_data_wt <- dll_data[dll_data$genotype == "wt",, drop =T]
levels(dll_data_wt$genotype)
dll_data_wt <- dll_data[dll_data$genotype == "wt",]
levels(dll_data_wt$genotype)
dll_data_wt <- droplevels(dll_data_wt)
levels(dll_data_wt$genotype)
?gather
library(tidyr)
?gather
