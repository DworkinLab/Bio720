subset = genotype =="wt" )
SCT <- dll_data$SCT
# First we will draw the histogram
hist(SCT_Dll$SCT,
col= "grey",
# Sometimes the default breaks are not so good, so here we use a sequence from lowest observed SCT to highest
breaks = seq(min(SCT), max(SCT)), # sets up breaks for histograms
# Since we are planning on displaying two data sets, we need to make sure our y axis goes high enough
# below we compute the tables for # of SCT for each subset
ylim = c(0, max( c(table(SCT), table(SCT)))),  # sets up the maximum
# Ditto for  the x axis
xlim = c(min(SCT), max(SCT)),
main = "Sex Comb Teeth in Drosophila",
xlab = " # Sex Comb Teeth ",
border = "black") # this is where the call to hist ends!
# Now we add on a second histogram
hist(SCT_wt$SCT,
col= "red",
density = 4,  # number of "crossing" lines
border = "red",  # The border colour for the histogram
breaks=seq(min(SCT), max(SCT)),
add = TRUE)
#Perhaps a legend would also be useful here
legend("topright",
# Sometimes for our text we want to use italics or generate a mathematical expression. we use expression()
# for more details ?text or ?plotmath
legend = c( expression(italic("Distal-less/+")),
expression(italic("wild-type"))),
col = c("grey", "red"),  # Setting up the colours for the legend box
lwd=4)   # lwd sets the line width
w_bar <- function(p_t, wA, wa) {((p_t*wA) + (1-p_t)*wa)}
w_bar <- function(p_t0, wA, wa) {((p_t0*wA) + (1-p_t0)*wa)}
p_t1 <- function(wA, w_bar, p_t0) {
(w1*p_0t)/w_bar}
p_t1 <- function(wA, w_a, p_t0) {
w_bar <- (p_t0*w1) + ((1-p_t0)*w2) # mean population fitness
p_t1 <- (w1*p_t0)/w_bar
return(p_t1)}
p_t1(w1 = 1.1, w = 1. 0, p_t0 = 0.5)
p_t1 <- function(wA, w_a, p_t0) {
w_bar <- (p_t0*w1) + ((1-p_t0)*w2) # mean population fitness
p_t1 <- (w1*p_t0)/w_bar
return(p_t1)}
p_t1(w1 = 1.1, w = 1.0, p_t0 = 0.5)
p_t1 <- function(w_A, w_a, p_t0) {
w_bar <- (p_t0*w_A) + ((1-p_t0)*w_a) # mean pop fitness
p_t1 <- (w_A*p_t0)/w_bar
return(p_t1)}
p_t1(wA = 1.1, w = 1.0, p_t0 = 0.5)
p_t1 <- function(w_A, w_a, p_t0) {
w_bar <- (p_t0*w_A) + ((1-p_t0)*w_a) # mean pop fitness
p_t1 <- (w_A*p_t0)/w_bar
return(p_t1)}
p_t1(w_A = 1.1, w_a = 1.0, p_t0 = 0.5)
replicate(n = 1000, p_t1, 1.1, 1.0, 0.5)
replicate(n = 1000, p_t1(), 1.1, 1.0, 0.5)
replicate(n = 1000, p_t1(1.1, 1.0, 0.5))
haploid.selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store allele frequencies and mean pop fitness
p <- rep(NA,n)  # a vector to store allele frequencies
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2) # mean population fitness
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
}
return(p)
}
haploid_selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store allele frequencies and mean pop fitness
p <- rep(NA,n)  # a vector to store allele frequencies
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2) # mean population fitness
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
}
return(p)
}
haploid_selection()
p <- haploid_selection()
p <- haploid_selection()
plot(p ~ 1:length(p), pch = 20,
ylab = "allele frequency",
xlab = "generation")
length(p)
p <- haploid_selection()
plot(p ~ length(p), pch = 20,
ylab = "allele frequency",
xlab = "generation")
p <- haploid_selection()
plot(p ~ 1:(length(p) + 1), pch = 20,
ylab = "allele frequency",
xlab = "generation")
p <- haploid_selection()
plot(p ~ 1:(length(p) - 1), pch = 20,
ylab = "allele frequency",
xlab = "generation")
1:length(p)
p <- haploid_selection()
plot(p ~ 1:100, pch = 20,
ylab = "allele frequency",
xlab = "generation")
p <- haploid_selection()
generations <- 1:length(p)
plot(p ~ generations, pch = 20,
ylab = "allele frequency",
xlab = "generation")
haploid_selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store allele frequencies and mean pop fitness
p <- rep(NA,n)  # a vector to store allele frequencies
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2) # mean population fitness
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
}
return(p)
}
haploid.selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store p, delta p and mean pop fitness
p <- rep(NA,n)
delta_p <- rep(NA, n)
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
delta_p[1] <- 0 #change in allele frequency
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2)
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
delta_p[i] <- p[i] - p[i-1]
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
maxAlleleFreq <- max(p)
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
cat("fixation of A1 does not occur, max. allele frequency is:", maxAlleleFreq )
}
# Let's make some plots
par(mfrow=c(2,2))
# 1. mean population fitness over time
plot(x = 1:n, y = w_bar,
xlab = "generations",
ylab = expression(bar(w)),
pch=20, col="red", cex = 2, cex.lab = 1.5, cex.main = 2.5,
main = paste("p0 = ", p0, "and s = ", (1 - (w2/w1))))
# 2. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)",
pch = 20, col = "red", cex.lab = 1.5)
# 3. plot of p[t+1] vs p[t]
p.1 <- p[-n]
p.2 <- p[-1]
plot(p.2 ~ p.1,
xlab = expression(p[t]),
ylab = expression(p[t+1]),
pch = 20, col = "red", cex = 2, cex.lab = 1.5)
# 4. plot of allele frequency change
plot(x = 2:n, y = delta_p[-1],
xlab = "generation",
ylab= expression(paste(Delta,"p")),
pch = 20, col = "red", cex = 2, cex.lab = 1.5)
}
haploid.selection(p0 = 0.0001, w1 = 1, w2 = 0.9, n = 1000)
haploid.selection(p0 = 0.0001, w1 = 1, w2 = 0.98, n = 1000)
haploid.selection(p0 = 0.0001, w1 = 1, w2 = 0.99, n = 1000)
haploid.selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store p, delta p and mean pop fitness
p <- rep(NA,n)
delta_p <- rep(NA, n)
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
delta_p[1] <- 0 #change in allele frequency
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2)
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
delta_p[i] <- p[i] - p[i-1]
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
maxAlleleFreq <- max(p)
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
cat("fixation of A1 does not occur, max. allele frequency is:", maxAlleleFreq )
}
# Let's make some plots
par(mfrow=c(2,2))
# 1. mean population fitness over time
plot(x = 1:n, y = w_bar,
xlab = "generations",
ylab = expression(bar(w)),
pch=20, col="red", cex = 2, cex.lab = 1.5, cex.main = 2.5,
main = paste("p0 = ", p0, "and s = ", (1 - (w2/w1))))
# 2. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)",
pch = 20, col = "red", cex.lab = 1.5)
# 3. plot of p[t+1] vs p[t]
p.1 <- p[-n]
p.2 <- p[-1]
plot(p.2 ~ p.1,
xlab = expression(p[t]),
ylab = expression(p[t+1]),
pch = 20, col = "red", cex = 2, cex.lab = 1.5)
# 4. plot of allele frequency change
plot(x = 2:n, y = delta_p[-1],
xlab = "generation",
ylab= expression(paste(Delta,"p")),
pch = 20, col = "red", cex = 2, cex.lab = 1.5)
}
haploid.selection(p0 = 0.0001, w1 = 1, w2 = 0.99, n = 1000)
haploid.selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store p, delta p and mean pop fitness
p <- rep(NA,n)
delta_p <- rep(NA, n)
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
delta_p[1] <- 0 #change in allele frequency
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2)
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
delta_p[i] <- p[i] - p[i-1]
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
cat("fixation of A1 does not occur, max. allele frequency is:", maxAlleleFreq )
}
# Let's make some plots
par(mfrow=c(2,2))
# 1. mean population fitness over time
plot(x = 1:n, y = w_bar,
xlab = "generations",
ylab = expression(bar(w)),
pch=20, col="red", cex = 2, cex.lab = 1.5, cex.main = 2.5,
main = paste("p0 = ", p0, "and s = ", (1 - (w2/w1))))
# 2. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)",
pch = 20, col = "red", cex.lab = 1.5)
# 3. plot of p[t+1] vs p[t]
p.1 <- p[-n]
p.2 <- p[-1]
plot(p.2 ~ p.1,
xlab = expression(p[t]),
ylab = expression(p[t+1]),
pch = 20, col = "red", cex = 2, cex.lab = 1.5)
# 4. plot of allele frequency change
plot(x = 2:n, y = delta_p[-1],
xlab = "generation",
ylab= expression(paste(Delta,"p")),
pch = 20, col = "red", cex = 2, cex.lab = 1.5)
}
haploid.selection(p0 = 0.0001, w1 = 1, w2 = 0.99, n = 1000)
haploid.selection <- function(p0 = 0.01, w1 = 1, w2 = 0.9, n = 100) {
# Initialize vectors to store p, delta p and mean pop fitness
p <- rep(NA,n)
delta_p <- rep(NA, n)
w_bar <- rep(NA, n)
# starting conditions
p[1] <- p0 # starting allele frequencies
delta_p[1] <- 0 #change in allele frequency
w_bar[1] <- (p[1]*w1) + ((1-p[1])*w2)
# now we need to loop from generation to generation
for ( i in 2:n) {
w_bar[i - 1] <- (p[i - 1]*w1) + ((1-p[i - 1])*w2)
p[i] <- (w1*p[i - 1])/w_bar[i - 1]
delta_p[i] <- p[i] - p[i-1]
}
if (any(p > 0.9999)) {
fixation <- min(which.max(p > 0.9999))
cat("fixation for A1 occurs approximately at generation:", fixation )
} else {
maxAlleleFreq <- max(p)
cat("fixation of A1 does not occur, max. allele frequency is:", print(maxAlleleFreq, digits = 2) )
}
# Let's make some plots
par(mfrow=c(2,2))
# 1. mean population fitness over time
plot(x = 1:n, y = w_bar,
xlab = "generations",
ylab = expression(bar(w)),
pch=20, col="red", cex = 2, cex.lab = 1.5, cex.main = 2.5,
main = paste("p0 = ", p0, "and s = ", (1 - (w2/w1))))
# 2. change in allele frequency over time
plot(x = 1:n, y = p,
xlab="generations",
ylab="Allele frequency (p)",
pch = 20, col = "red", cex.lab = 1.5)
# 3. plot of p[t+1] vs p[t]
p.1 <- p[-n]
p.2 <- p[-1]
plot(p.2 ~ p.1,
xlab = expression(p[t]),
ylab = expression(p[t+1]),
pch = 20, col = "red", cex = 2, cex.lab = 1.5)
# 4. plot of allele frequency change
plot(x = 2:n, y = delta_p[-1],
xlab = "generation",
ylab= expression(paste(Delta,"p")),
pch = 20, col = "red", cex = 2, cex.lab = 1.5)
}
haploid.selection(p0 = 0.0001, w1 = 1, w2 = 0.99, n = 1000)
?print
?cat
haploid.selection(p0 = 0.0001, w1 = 1, w2 = 0.985, n = 1000)
haploid.selection(p0 = 0.0001, w1 = 1, w2 = 0.987, n = 1000)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
set.seed(720)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
set.seed(720)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
set.seed(720)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
set.seed(720)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
set.seed(720)
x <- rnorm(1000, mean = 5, sd = 1)
mean(x)
ru1 <- runif(n = 1000, min = 0, max = 1)
length(ru1)
head(ru1)
tail(ru1)
hist(ru1)
ru1 <- runif(n = 10000, min = 0, max = 1)
length(ru1)
head(ru1)
tail(ru1)
hist(ru1)
hist(ru1)
curve(dunif(x, 0, 1), 0, 1)
hist(ru1, freq = F)
curve(dunif(x, 0, 1), 0, 1, add = T)
hist(ru1, freq = F)
curve(dunif(x, 0, 1), 0, 1,
add = T, col = "red")
par(mfrow = c(1,1))
hist(ru1, freq = F)
curve(dunif(x, 0, 1), 0, 1,
add = T, col = "red")
par(mfrow = c(1,1))
hist(ru1, freq = F)
curve(dunif(x, 0, 1), 0, 1,
add = T, col = "red", lwd = 2)
ru1 <- runif(n = 10000, min = 0, max = 1)
length(ru1)
head(ru1)
tail(ru1)
par(mfrow = c(1,1))
hist(ru1, freq = F)
curve(dunif(x, 0, 1), 0, 1,
add = T, col = "red", lwd = 2)
random.normal.100 <- rnorm(n=100, mean=5,sd=2)
par(mfrow=c(3,1))
plot(random.normal.100)
boxplot(random.normal.100)
hist(random.normal.100)
random.normal.100.rep <- replicate(n = 10,
rnorm(100, 5, 2))
par(mfrow=c(4,3))
apply(X=random.normal.100.rep, MARGIN=2, FUN=hist)
apply(X=random.normal.100.rep, MARGIN=2, FUN=mean)
apply(random.normal.100.rep, 2, sd)
par(mfrow=c(4,3))
apply(X=random.normal.100.rep, MARGIN=2, FUN=hist)
apply(X=random.normal.100.rep, MARGIN=2, FUN=hist)
par(mfrow=c(3,3))
apply(X=random.normal.100.rep, MARGIN=2, FUN=hist)
apply(X=random.normal.100.rep, MARGIN=2, FUN=mean)
random.normal.100.rep <- replicate(n = 10,
rnorm(100, 5, 2))
par(mfrow=c(4,4))
apply(X=random.normal.100.rep, MARGIN=2, FUN=hist)
apply(X=random.normal.100.rep, MARGIN=2, FUN=hist)
apply(X=random.normal.100.rep, MARGIN=2, FUN=hist)
summary(random.normal.100.rep)
summary(random.normal.100.rep)
random.normal.100.rep <- replicate(n = 10,
rnorm(100, 5, 2))
summary(random.normal.100.rep)
par(mfrow=c(2,2))
a = 5 # intercept
b = 0.7 # slope
x <- seq(2,20) # values of our predictor "x"
y_fixed <- a + b*x # we are expressing the relationship between y and x as a linear model. In this case we are generating the data using such a model.
plot(y_fixed ~ x, main= "Deterministic Component of the model") # A linear model
abline(a=5, b=0.7)
par(mfrow=c(1,1))
a = 5 # intercept
b = 0.7 # slope
x <- seq(2,20) # values of our predictor "x"
y_fixed <- a + b*x # we are expressing the relationship between y and x as a linear model. In this case we are generating the data using such a model.
plot(y_fixed ~ x, main= "Deterministic Component of the model") # A linear model
abline(a=5, b=0.7)
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
y.sim.1 <- rnorm(length(x), mean = y_fixed, sd = 2)
plot(y.sim.1 ~ x, pch = 20)
abline(a = 5, b = 0.7, col = "red") # Expected relationship based on the parameters we used.
y.sim.1.lm <- lm(y.sim.1 ~ x) # fit a regression with simulated data
abline(reg = y.sim.1.lm, lty = 2, col = "blue") # estimated values based on simulated data.
?sample
seq1_no_bias <- sample(c("A","C","G", "T"),
size = 1000, replace = TRUE)
head(seq1_no_bias)
length(seq1_no_bias)
?cat
seq1 <- cat(seq1_no_bias, sep = "")
seq1
seq1 <- paste0(seq1_no_bias, sep = "")
seq1
?paste
seq1 <- paste(seq1_no_bias, sep = "", collapse = "")
seq1
?sample
seq2_60GCbias <- paste(sample(c("A","C","G", "T"),
size = 1000, prob = c(20,30,30,20),
replace = TRUE),
sep = "", collapse = "")
seq2_60GCbias
?grep
seq2_60GCbias <- paste(sample(c("A","C","G", "T"),
size = 1000, prob = c(20,30,30,20),
replace = TRUE),
sep = "", collapse = "")
seq2_60GCbias
?grep
grep("GGCCA",seq2_60GCbias )
grep("GGCC",seq2_60GCbias )
grep("GGC",seq2_60GCbias )
grep("GG",seq2_60GCbias )
grep("G",seq2_60GCbias )
?jitter
knitr::opts_chunk$set(echo = TRUE)
options(digits = 3)
dll_data = read.csv("http://datadryad.org/bitstream/handle/10255/dryad.8377/dll.csv", header=TRUE)
dll_data <- na.omit(dll_data)
dll_data_subset <- dll_data[sample(nrow(dll_data), 300, replace = F),]
dll_data_subset$temp <- factor(dll_data_subset$temp)
plot(jitter(SCT, factor = 1.5) ~ tibia,
pch = c(16,17)[dll_data_subset$temp], # symbol
cex = 0.95, # size of symbol
col = c("blue", "red")[dll_data_subset$genotype], # symbol colour
xlim = c(0.4, 0.57),
ylim = c(8, 18),
xlab = " tibia length",
ylab = "Number of Sex Comb Teeth",
main = "leg lengths measures",
data = dll_data_subset)
plot(jitter(SCT, factor = 1) ~ tibia,
pch = c(16,17)[dll_data_subset$temp], # symbol
cex = 0.95, # size of symbol
col = c("blue", "red")[dll_data_subset$genotype], # symbol colour
xlim = c(0.4, 0.57),
ylim = c(8, 18),
xlab = " tibia length",
ylab = "Number of Sex Comb Teeth",
main = "leg lengths measures",
data = dll_data_subset)
?regmatches
?charmatch
charmatch("GGCCA", seq2_60GCbias)
grep("GGCCAA",seq2_60GCbias )
grep("GGCCA",seq2_60GCbias )
q()
